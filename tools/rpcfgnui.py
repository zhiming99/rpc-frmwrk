#!/usr/bin/env python3
import json
import os
import sys 
import errno
from updcfg import *
from updwscfg import *
from updk5cfg import ConfigAuthServer

import getopt, sys

def usage():
    print( "Usage: python3 rpcfgnui.py <init file>" )
    print( "\t<init file> can be generated by <SaveAs>" )
    print( "\tfrom rpcfg.py on a host with GUI" )

import getopt
def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "h" )
    except getopt.GetoptError as err:
        # print help information and exit:
        print(err)  # will print something like "option -a not recognized"
        usage()
        sys.exit(-errno.EINVAL)

    for o, a in opts:
        if o == "-h" :
            usage()
            sys.exit( 0 )
        else:
            assert False, "unhandled option"
 
    if len( args ) == 0 :
        usage()
        sys.exit( -errno.EINVAL )
    

    ret = 0
    initFile = args[ 0 ]

    try:
        if os.access( './svridx', os.F_OK ):
            bServer = True
        elif os.access( './clidx', os.F_OK ):
            bServer = False
        else:
            #auto-testing does not provide both files
            bServer = True

        if bServer is None:
            raise Exception( "Error bad installer" )

        fp = open( initFile, 'r' )
        initCfg = json.load( fp )
        fp.close()

        if bServer:
            initCfg[ 'InstToSvr' ] = 'true'
        else:
            initCfg[ 'InstToSvr' ] = 'false'
        fp = open( initFile, 'w' )
        json.dump( initCfg, fp, indent=4 )
        fp.close()

        if IsFeatureEnabled( "krb5" ):
            ret = ConfigAuthServer( initFile )
            if ret < 0:
                print( "Error failed to config auth server %d" % ret )
                return ret

        if IsFeatureEnabled( "openssl" ):
            ret = ConfigWebServer( initFile )
            if ret < 0:
                print( "Error failed to config web server %d" % ret )
                return ret  

        ret = Update_InitCfg( initFile, None )

    except Exception as err:
        text = "Failed to update the config files:" + str( err )
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        second_text = "@" + fname + ":" + str(exc_tb.tb_lineno)
        print( text, second_text )
        ret = -errno.EFAULT

    return ret

if __name__ == "__main__":
    main()
