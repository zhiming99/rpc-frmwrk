// GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
// Copyright (C) 2024  zhiming <woodhead99@gmail.com>
// This program can be distributed under the terms of the GNU GPLv3.
// ridlc -O . ../oaproxy.ridl 
// Your task is to implement the following classes
// to get your rpc server work
#pragma once
#include "oa2check.h"
#include "../security.h"

class COA2proxy_CliImpl :
    public COA2proxy_CliSkel,
    public IAuthenticateServer
{
    public:
    typedef COA2proxy_CliSkel super;
    COA2proxy_CliImpl( const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(COA2proxy_CliImpl ) ); }

    // OAuth2Proxy
    virtual gint32 IsTokenValidCallback(
        IConfigDb* context, gint32 iRet,
        bool bValid /*[ In ]*/ );
    
    virtual gint32 GetUserInfoCallback(
        IConfigDb* context, gint32 iRet,
        USER_INFO& ui /*[ In ]*/ );
    
    virtual gint32 RevokeUserCallback(
        IConfigDb* context, gint32 iRet );

    virtual gint32 WrapMessage(
        const std::string& strSess,
        BufPtr& pInMsg,
        BufPtr& pOutMsg ) = 0;
        
    gint32 UnwrapMessage(
        const std::string& strSess,
        BufPtr& pInMsg,
        BufPtr& pOutMsg ) override
    {
        pOutMsg = pInMsg;
        return 0;
    }

    gint32 GetMicMsg(
        const std::string& strSess,
        BufPtr& pInMsg,
        BufPtr& pOutMic ) override
    {
        pOutMsg = pInMsg;
        return 0;
    }
        
    gint32 VerifyMicMsg(
        const std::string& strSess,
        BufPtr& pInMsg,
        BufPtr& pInMic ) override
    {
        return 0;
    }

    gint32 RemoveSession(
        const std::string& strSess ) override;

    gint32 GetSess(
        guint32 dwPortId,
        std::string& strSess ) override;

    gint32 IsNoEnc(
        const std::string& strSess ) override
    { return 0; }

    gint32 IsSessExpired(
        const std::string& strSess ) override;

    gint32 InquireSess(
        const std::string& strSess,
        CfgPtr& pInfo ) override;
};

