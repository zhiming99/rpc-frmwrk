//   Java: 'ridlc -jO . -Porg.rpcf.tests testypes.ridl'
// Python: 'mkdir testypes; ridlc -pO ./testypes testypes.ridl'
//    C++: 'mkdir testypes; ridlc -O ./testypes testypes.ridl'
//   FUSE: 'mkdir testypes; ridlc -f -O ./testypes testypes.ridl'

// this example demonstrates different data types an interface can accept

// declare the name of the application
appname "TestTypes";

struct FILE_INFO
{
  /* define the fileds here, with default value optionally*/
  string szFileName = "test.dat";
  uint64 fileSize = 0;
  bool bRead = true;
};

// declare interface
interface ITestTypes
{
    Echo( string strText )
        returns ( string strResp ) ;

    [ async_p ] Echo3( string strText )
        returns ( string strResp ) ;

    [ async ] EchoByteArray( bytearray pBuf )
        returns ( bytearray pRespBuf );

    EchoArray( array< int32 > arrInts )
        returns ( array< int32 > arrIntsR );

    EchoMap( map< int32, string > mapReq )
        returns ( map< int32, string > mapResp );

    EchoMany( int32 i1, int16 i2, int64 i3, float i4, double i5, string szText )
        returns( int32 i1r, int16 i2r, int64 i3r, float i4r, double i5r, string szTextr );

    EchoStruct( FILE_INFO fi )
        returns( FILE_INFO fir );

    EchoNoParams() returns ();

    EchoStream( HSTREAM hstm )
        returns ( HSTREAM hstmr );

    EchoVariant( variant var1, variant var2 )
        returns ( variant rvar1, variant rvar2 );

    EchoVarArray( array< variant > arrVars )
        returns ( array< variant > rarrVars );
    // Note that event method does not have response.
    [ event ]OnHelloWorld( string strMsg ) returns ();
};

// declare the service
service TestTypesSvc
{
    interface ITestTypes;
};
