// GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
// Copyright (C) 2024  zhiming <woodhead99@gmail.com>
// This program can be distributed under the terms of the GNU GPLv3.
// ridlc -s -O . ../../../actcancel.ridl 
#pragma once
#include "actcancel.h"

#include "IActiveCancelcli.h"

DECLARE_AGGREGATED_SKEL_PROXY(
    CActiveCancel_CliSkel,
    CStatCountersProxySkel,
    IIActiveCancel_PImpl );

#define Clsid_CActiveCancel_CliBase    Clsid_Invalid

DECLARE_AGGREGATED_PROXY(
    CActiveCancel_CliBase,
    CStatCounters_CliBase,
    IIActiveCancel_CliApi,
    CFastRpcProxyBase );

class CActiveCancel_CliImpl
    : public CActiveCancel_CliBase
{
    sem_t m_semWait;
    gint32 m_iError = STATUS_SUCCESS;

    public:
    typedef CActiveCancel_CliBase super;
    CActiveCancel_CliImpl( const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    {
        SetClassId( clsid(CActiveCancel_CliImpl ) );
        Sem_Init( &m_semWait, 0, 0 );
    }

    // RPC Async Req Callback
    gint32 LongWaitCallback(
        IConfigDb* context, 
        gint32 iRet,const std::string& i0r /*[ In ]*/ ) override;
    gint32 CreateStmSkel(
        InterfPtr& pIf ) override;
    
    gint32 OnPreStart(
        IEventSink* pCallback ) override;

    gint32 CancelRequest(
        guint64 qwTaskToCancel )
    {
        InterfPtr pIf = this->GetStmSkel();
        if( pIf.IsEmpty() )
            return -EFAULT;
        CInterfaceProxy* pProxy = pIf;
        return pProxy->CancelRequest(
            qwTaskToCancel );
    }

    inline void NotifyComplete()
    { Sem_Post( &m_semWait ); }

    inline void WaitForComplete()
    { Sem_Wait( &m_semWait ); }

    inline void SetError( gint32 iError )
    { m_iError = iError; }

    inline gint32 GetError() const
    { return m_iError; }
    
};

class CActiveCancel_ChannelCli
    : public CRpcStreamChannelCli
{
    public:
    typedef CRpcStreamChannelCli super;
    CActiveCancel_ChannelCli(
        const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(
        CActiveCancel_ChannelCli ) ); }
};

