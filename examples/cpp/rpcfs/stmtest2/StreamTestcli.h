// Generated by ridlc
// ridlc -s -O . ../../../stmtest.ridl 
// Your task is to implement the following classes
// to get your rpc server work
#pragma once
#include "stmtest.h"
#include "commdefs.h"

#define Clsid_CStreamTest_CliBase    Clsid_Invalid

DECLARE_AGGREGATED_PROXY(
    CStreamTest_CliBase,
    CStatCounters_CliBase,
    CStreamProxyAsync,
    IIStreamTest_CliApi,
    CFastRpcProxyBase );

class CStreamTest_CliImpl
    : public CStreamTest_CliBase
{
    gint32 m_iError = 0;
    sem_t m_semWait;
    public:
    typedef CStreamTest_CliBase super;
    CStreamTest_CliImpl( const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    {
        SetClassId( clsid(CStreamTest_CliImpl ) );
        Sem_Init( &m_semWait, 0, 0 );
    }

    /* The following 2 methods are important for */
    /* streaming transfer. rewrite them if necessary */
    gint32 OnStreamReady( HANDLE hChannel ) override
    { return super::OnStreamReady( hChannel ); } 
    
    gint32 OnStmClosing( HANDLE hChannel ) override
    { return super::OnStmClosing( hChannel ); }

    inline void WaitForComplete()
    { Sem_Wait( &m_semWait ); }

    inline void NotifyComplete()
    { Sem_Post( &m_semWait ); }

    gint32 OnReadStreamComplete(
        HANDLE hChannel, gint32 iRet,
        BufPtr& pBuf, IConfigDb* pCtx ) override;

    gint32 OnWriteStreamComplete(
        HANDLE hChannel, gint32 iRet,
        BufPtr& pBuf, IConfigDb* pCtx ) override;
    // IStreamTest
    //
    inline void SetError( gint32 iError )
    { m_iError = iError; }

    inline gint32 GetError()
    { return m_iError; }
    
    
    gint32 CreateStmSkel(
        InterfPtr& pIf ) override;
    
    gint32 OnPreStart(
        IEventSink* pCallback ) override;
};

class CStreamTest_ChannelCli
    : public CRpcStreamChannelCli
{
    public:
    typedef CRpcStreamChannelCli super;
    CStreamTest_ChannelCli(
        const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(
        CStreamTest_ChannelCli ) ); }
};

