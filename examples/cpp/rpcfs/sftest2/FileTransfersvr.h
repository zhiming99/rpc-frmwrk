// Generated by ridlc
// ridlc -s -O . ../../../sftest.ridl 
// Your task is to implement the following classes
// to get your rpc server work
#pragma once
#include "sftest.h"
#include "transctx.h"

#define Clsid_CFileTransfer_SvrBase    Clsid_Invalid

DECLARE_AGGREGATED_SERVER(
    CFileTransfer_SvrBase,
    CStatCounters_SvrBase,
    CStreamServerAsync,
    IIFileTransfer_SvrApi,
    CFastRpcServerBase );

class CFileTransfer_SvrImpl
    : public CFileTransfer_SvrBase
{
    std::string m_strRootDir = "/tmp/sfsvr-root/";

    public:
    TransferContext< CStreamServerAsync > m_oTransCtx;
    typedef CFileTransfer_SvrBase super;
    CFileTransfer_SvrImpl( const IConfigDb* pCfg );

    /* The following 3 methods are important for */
    /* streaming transfer. rewrite them if necessary */
    gint32 OnStreamReady( HANDLE hChannel ) override;
    
    gint32 OnStmClosing( HANDLE hChannel ) override;
    
    gint32 AcceptNewStream(
        IEventSink* pCb, IConfigDb* pDataDesc ) override
    { return STATUS_SUCCESS; }
    
    gint32 OnPostStart(
        IEventSink* pCallback ) override
    {
        StartQpsTask();
        return super::OnPostStart( pCallback );
    }

    gint32 OnPreStop(
        IEventSink* pCallback ) override
    {
        StopQpsTask();
        return super::OnPreStop( pCallback );
    }

    // IFileTransfer
    virtual gint32 StartUpload(
        const std::string& strFile /*[ In ]*/,
        HANDLE hChannel_h /*[ In ]*/,
        guint64 qwOffset /*[ In ]*/,
        guint64 qwSize /*[ In ]*/ );
    
    virtual gint32 StartDownload(
        const std::string& strFile /*[ In ]*/,
        HANDLE hChannel_h /*[ In ]*/,
        guint64 qwOffset /*[ In ]*/,
        guint64 qwSize /*[ In ]*/ );
    
    virtual gint32 GetFileInfo(
        const std::string& strFile /*[ In ]*/,
        FileInfo& fi /*[ Out ]*/ );
    
    virtual gint32 RemoveFile(
        const std::string& strFile /*[ In ]*/ );

    gint32 ReadFileAndSend( HANDLE hChannel )
    { return m_oTransCtx.ReadFileAndSend( hChannel ); }

    gint32 WriteFileAndRecv( HANDLE hChannel, BufPtr& pBuf )
    { return m_oTransCtx.WriteFileAndRecv( hChannel, pBuf ); }

    gint32 OnWriteStreamComplete(
        HANDLE hChannel, gint32 iRet,
        BufPtr& pBuf, IConfigDb* pCtx );

    gint32 OnReadStreamComplete(
        HANDLE hChannel, gint32 iRet,
        BufPtr& pBuf, IConfigDb* pCtx );

    gint32 SendToken( HANDLE hChannel, BufPtr& pBuf )
    { return m_oTransCtx.SendToken( hChannel, pBuf ); }

    gint32 CreateStmSkel(
        HANDLE, guint32, InterfPtr& ) override;
    
    gint32 OnPreStart(
        IEventSink* pCallback ) override;
};

class CFileTransfer_ChannelSvr
    : public CRpcStreamChannelSvr
{
    public:
    typedef CRpcStreamChannelSvr super;
    CFileTransfer_ChannelSvr(
        const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(
        CFileTransfer_ChannelSvr ) ); }
};

