//Generated by ridlc
//Your task is to implement the following classes
//to get your rpc server work
#pragma once
#include "stmtest.h"
#include "commdefs.h"
#include "IStreamTestcli.h"

DECLARE_AGGREGATED_PROXY(
    CStreamTest_CliSkel,
    CStatCountersProxy,
    CStreamProxyAsync,
    IIStreamTest_PImpl );

class CStreamTest_CliImpl
    : public CStreamTest_CliSkel
{
    gint32 m_iError = 0;
    sem_t m_semWait;
    public:
    typedef CStreamTest_CliSkel super;
    CStreamTest_CliImpl( const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { Sem_Init( &m_semWait, 0, 0 ); }

    /* The following 2 methods are important for */
    /* streaming transfer. rewrite them if necessary */
    gint32 OnStreamReady( HANDLE hChannel ) override
    { return super::OnStreamReady( hChannel ); } 
    
    gint32 OnStmClosing( HANDLE hChannel ) override
    { return super::OnStmClosing( hChannel ); }

    inline void WaitForComplete()
    { Sem_Wait( &m_semWait ); }

    inline void NotifyComplete()
    { Sem_Post( &m_semWait ); }

    gint32 OnReadStreamComplete(
        HANDLE hChannel, gint32 iRet,
        BufPtr& pBuf, IConfigDb* pCtx ) override;

    gint32 OnWriteStreamComplete(
        HANDLE hChannel, gint32 iRet,
        BufPtr& pBuf, IConfigDb* pCtx ) override;
    // IStreamTest
    //
    inline void SetError( gint32 iError )
    { m_iError = iError; }

    inline gint32 GetError()
    { return m_iError; }
    
};

