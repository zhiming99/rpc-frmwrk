//Generated by ridlc
//Your task is to implement the following classes
//to get your rpc server work
#pragma once
#include "actcancel.h"

class CActiveCancel_CliImpl
    : public CActiveCancel_CliSkel
{
    sem_t m_semWait;
    gint32 m_iError = STATUS_SUCCESS;

    public:
    typedef CActiveCancel_CliSkel super;
    CActiveCancel_CliImpl( const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    {
        SetClassId( clsid(CActiveCancel_CliImpl ) ); 
        Sem_Init( &m_semWait, 0, 0 );
    }

    // IActiveCancel
    virtual gint32 LongWaitCallback(
        IConfigDb* context, gint32 iRet,
        const std::string& i0r /*[ In ]*/ );

    inline void NotifyComplete()
    { Sem_Post( &m_semWait ); }

    inline void WaitForComplete()
    { Sem_Wait( &m_semWait ); }

    inline void SetError( gint32 iError )
    { m_iError = iError; }

    inline gint32 GetError() const
    { return m_iError; }
    
};

