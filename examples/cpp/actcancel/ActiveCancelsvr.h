// Generated by ridlc
// ridlc -O . ../../actcancel.ridl 
// Your task is to implement the following classes
// to get your rpc server work
#pragma once
#include "actcancel.h"

#include "IActiveCancelsvr.h"

DECLARE_AGGREGATED_SERVER(
    CActiveCancel_SvrSkel,
    CStatCountersServer,
    IIActiveCancel_SImpl );

class CActiveCancel_SvrImpl
    : public CActiveCancel_SvrSkel
{
    public:
    typedef CActiveCancel_SvrSkel super;
    CActiveCancel_SvrImpl( const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(CActiveCancel_SvrImpl ) ); }

    gint32 LongWaitCb(
        IEventSink*, IConfigDb* pReqCtx_,
        const std::string& i0 );

    // IActiveCancel
    virtual gint32 LongWait(
        IConfigDb* pReqCtx_,
        const std::string& i0 /*[ In ]*/,
        std::string& i0r /*[ Out ]*/ );
    
    // RPC Async Req Cancel Handler
    // Rewrite this method to release the resources
    gint32 OnLongWaitCanceled(
        IConfigDb* pReqCtx,
        gint32 iRet,
        const std::string& i0 /*[ In ]*/ );
};

