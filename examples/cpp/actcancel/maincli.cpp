// Generated by ridlc
// ridlc -O . ../../actcancel.ridl 
#include "rpc.h"
#include "proxy.h"
using namespace rpcf;
#include "ActiveCancelcli.h"

ObjPtr g_pIoMgr;


FactoryPtr InitClassFactory()
{
    BEGIN_FACTORY_MAPS;

    INIT_MAP_ENTRYCFG( CActiveCancel_CliImpl );
    
    END_FACTORY_MAPS;
}

extern "C"
gint32 DllLoadFactory( FactoryPtr& pFactory )
{
    pFactory = InitClassFactory();
    if( pFactory.IsEmpty() )
        return -EFAULT;
    return STATUS_SUCCESS;
}

gint32 InitContext()
{
    gint32 ret = CoInitialize( 0 );
    if( ERROR( ret ) )
        return ret;
    do{
        // load class factory for 'actcancel'
        FactoryPtr p = InitClassFactory();
        ret = CoAddClassFactory( p );
        if( ERROR( ret ) )
            break;
        
        CParamList oParams;
        oParams.Push( "actcancelcli" );

        // adjust the thread number if necessary
        oParams[ propMaxIrpThrd ] = 0;
        oParams[ propMaxTaskThrd ] = 1;
        
        ret = g_pIoMgr.NewObj(
            clsid( CIoManager ), 
            oParams.GetCfg() );
        if( ERROR( ret ) )
            break;

        CIoManager* pSvc = g_pIoMgr;
        ret = pSvc->Start();
        if( ERROR( ret ) )
            break;
        
        
    }while( 0 );

    if( ERROR( ret ) )
    {
        g_pIoMgr.Clear();
        CoUninitialize();
    }
    return ret;
}

gint32 DestroyContext()
{
    IService* pSvc = g_pIoMgr;
    if( pSvc != nullptr )
    {
        pSvc->Stop();
        g_pIoMgr.Clear();
    }

    CoUninitialize();
    DebugPrintEx( logErr, 0,
        "#Leaked objects is %d",
        CObjBase::GetActCount() );
    return STATUS_SUCCESS;
}

gint32 maincli( CActiveCancel_CliImpl* pIf, int argc, char** argv );

int main( int argc, char** argv )
{
    gint32 ret = 0;
    do{
        ret = InitContext();
        if( ERROR( ret ) )
            break;
        
        stdstr strDesc = "./actcanceldesc.json";
        CRpcServices* pSvc = nullptr;
        InterfPtr pIf;
        do{
            CParamList oParams;
            oParams.Clear();
            oParams[ propIoMgr ] = g_pIoMgr;
            
            ret = CRpcServices::LoadObjDesc(
                strDesc, "ActiveCancel",
                false, oParams.GetCfg() );
            if( ERROR( ret ) )
                break;
            ret = pIf.NewObj(
                clsid( CActiveCancel_CliImpl ),
                oParams.GetCfg() );
            if( ERROR( ret ) )
                break;
            pSvc = pIf;
            ret = pSvc->Start();
            if( ERROR( ret ) )
                break;
            while( pSvc->GetState()== stateRecovery )
                sleep( 1 );
            
            if( pSvc->GetState() != stateConnected )
            {
                ret = ERROR_STATE;
                break;
            }
        }while( 0 );
        
        if( SUCCEEDED( ret ) )
            ret = maincli( pIf, argc, argv );
            
        // Stopping the object
        if( !pIf.IsEmpty() )
            pIf->Stop();
    }while( 0 );

    DestroyContext();
    return ret;
}

//-----Your code begins here---
gint32 maincli(
    CActiveCancel_CliImpl* pIf,
    int argc, char** argv )
{
    gint32 ret = 0;
    do{
        stdstr i0 = "hello, actctest!";
        stdstr i0r;
        CParamList oCtx;
        ret = pIf->LongWait( oCtx.GetCfg(), i0, i0r );
        if( ERROR( ret ) )
        {
            OutputMsg( ret, "LongWait failed with error " );
            break;
        }
        if( SUCCEEDED( ret ) )
        {
            OutputMsg( ret,
                "LongWait succeeded with response %s",
                i0r.c_str() );
            break;
        }
        if( ret != STATUS_PENDING )
        {
            OutputMsg( ret, "LongWait failed with error " );
            break;
        }
        OutputMsg( 0, "LongWait is pending, wait 3 seconds" );
        sleep( 3 );
        OutputMsg( 0, "Time up, canceling LongWait Request..." );
        guint64 qwTaskId = 0;
        oCtx.GetQwordProp( propTaskId, qwTaskId );
        ret = pIf->CancelRequest( qwTaskId );
        if( ERROR( ret ) )
        {
            // have to wait for complete
            OutputMsg( ret,
                "CancelRequest failed with error %d, wait...", ret );
            pIf->WaitForComplete();
            ret = pIf->GetError();
            OutputMsg( ret,
                "LongWait returned with error " );
            break;
        }
        else
        {
            OutputMsg( ret, "CancelRequest succeeded" );
            // LongWait will return something from the callback
            pIf->WaitForComplete();
        }

    }while( 0 );

    return ret;
}

