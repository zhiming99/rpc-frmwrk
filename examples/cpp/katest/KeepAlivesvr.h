//Generated by ridlc
//Your task is to implement the following classes
//to get your rpc server work
#pragma once
#include "katest.h"

#include "IKeepAlivesvr.h"

DECLARE_AGGREGATED_SERVER(
    CKeepAlive_SvrSkel,
    CStatCountersServer,
    IIKeepAlive_SImpl );

class CKeepAlive_SvrImpl
    : public CKeepAlive_SvrSkel
{
    public:
    typedef CKeepAlive_SvrSkel super;
    CKeepAlive_SvrImpl( const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(CKeepAlive_SvrImpl ) ); }

    gint32 InvokeUserMethod(
        IConfigDb* pParams,
        IEventSink* pCallback ) override
    {
        gint32 ret = AllocReqToken();
        if( ERROR( ret ) )
            return ret;
        return super::InvokeUserMethod(
            pParams, pCallback );
    }

    gint32 OnPostStart(
        IEventSink* pCallback ) override
    {
        StartQpsTask();
        return super::OnPostStart( pCallback );
    }

    gint32 OnPreStop(
        IEventSink* pCallback ) override
    {
        StopQpsTask();
        return super::OnPreStop( pCallback );
    }

    gint32 LongWaitCb(
        IEventSink*, IConfigDb* pReqCtx_,
        const std::string& i0 );

    // IKeepAlive
    virtual gint32 LongWait(
        IConfigDb* pReqCtx_,
        const std::string& i0 /*[ In ]*/,
        std::string& i0r /*[ Out ]*/ );
    
    // RPC Async Req Cancel Handler
    // Rewrite this method to release the resources
    gint32 OnLongWaitCanceled(
        IConfigDb* pReqCtx,
        gint32 iRet,
        const std::string& i0 /*[ In ]*/ );
};

