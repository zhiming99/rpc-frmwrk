# GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
# Copyright (C) 2023  zhiming <woodhead99@gmail.com>
# This program can be distributed under the terms of the GNU GPLv3.
# ridlc -pO . ../../iftest.ridl 
from typing import Tuple
from rpcf.rpcbase import *
from rpcf.proxy import *
from seribase import CSerialBase
from ifteststructs import *
import errno

from IfTestcli import CIfTestProxy
import os
import time
from pprint import pprint

import signal
bExit = False
def SigHandler( signum, frame ):
    global bExit
    bExit = True


def MainEntryCli() :
    ret = 0
    signal.signal( signal.SIGINT, SigHandler)
    oContext = PyRpcContext( 'PyRpcProxy' )
    with oContext as ctx:
        if ctx.status < 0:
            ret = ctx.status
            print( os.getpid(), 
                "Error start PyRpcContext %d" % ret )
            return ret
        
        print( "start to work here..." )
        strPath_ = os.path.dirname( os.path.realpath( __file__) )
        strPath_ += '/iftestdesc.json'
        oProxy_IfTest = CIfTestProxy( ctx.pIoMgr,
            strPath_, 'IfTest' )
        ret = oProxy_IfTest.GetError()
        if ret < 0 :
            return ret
        
        with oProxy_IfTest as oProxy:
            global bExit
            try:
                ret = oProxy.GetError()
                if ret < 0 :
                    raise Exception( 'start proxy failed' )
                state = oProxy.oInst.GetState()
                while state == cpp.stateRecovery :
                    time.sleep( 1 )
                    state = oProxy.oInst.GetState()
                    if bExit:
                        break
                if state != cpp.stateConnected or bExit:
                    return ErrorCode.ERROR_STATE
                ret = maincli( oProxy )
            except Exception as err:
                print( err )
            
        oProxy_IfTest = None
    oContext = None
    return ret
    
#------customize the method below for your own purpose----
def maincli( 
    oProxy: CIfTestProxy ) -> int:
    '''
    adding your code here
    Calling a proxy method like
    'oProxy.Echo( i0 )'
    '''
    i0 = GlobalFeatureList()
    i0.extendUserFeature = dict()
    i0.extendUserFeature[2] = "extendUserFeature"
    i0.userFeature = dict()
    i0.userFeature[1] = "userFeature"
    i0.userOnlineFeature = dict()
    i0.userOnlineFeature["hello"] = "userOnlineFeature"
    i0.userHistoricalStatisticsFeature = dict()
    i0.userHistoricalStatisticsFeature[3] = 5
    i0.sceneFeature = dict()
    i0.sceneFeature[6] = "sceneFeature"
    i0.formL24Exposure = dict()
    i0.formL24Exposure["formL24Exposure"] = 7
    i0.industryL24Exposure = dict()
    i0.industryL24Exposure["industryL24Exposure"] = 8
    i0.flightId = "sz2680"
    i0.requestId = "haha9527"
    i0.time = 23456
    i0.flag = 9
    i0.body = [ GlobalFeature(), GlobalFeature()]
    i0.body[0].adFeature = dict()
    i0.body[0].adFeature[11] = "adFeature"
    i0.body[0].extendAdFeature = dict()
    i0.body[0].extendAdFeature[11] = "extendAdFeature"
    i0.body[0].extendAdFeature[14] = "extendAdFeature2"
    i0.body[0].adHistoricalStatisticsFeature = dict()
    i0.body[0].adHistoricalStatisticsFeature[12] = 13
    i0.body[0].adHistoricalStatisticsFeature[39] = 50
    i0.body[0].userRealtimeStatisticsFeature = dict()
    i0.body[0].userRealtimeStatisticsFeature[14] = 15
    i0.body[0].userRealtimeStatisticsFeature[29] = 33
    i0.body[0].extenduserRealtimeStatisticsFeature = dict()
    i0.body[0].extenduserRealtimeStatisticsFeature[16] = 17
    i0.body[0].extenduserRealtimeStatisticsFeature[22] = 22
    i0.body[0].adRealtimeStatisticsFeature = dict() 
    i0.body[0].adRealtimeStatisticsFeature[18] = 19
    i0.body[0].adRealtimeStatisticsFeature[38] = 39
    i0.body[0].adFormId = "bobo";
    i0.body[0].materialId = "steel";
    i0.body[0].creativeId = "cici";
    i0.body[0].sponsorId = "dudu";
    i0.body[1].adFeature = dict()
    i0.body[1].adFeature[11] = "adFeature"
    i0.body[1].extendAdFeature = dict()
    i0.body[1].extendAdFeature[11] = "extendAdFeature"
    i0.body[1].adHistoricalStatisticsFeature = dict()
    i0.body[1].adHistoricalStatisticsFeature[12] = 13
    i0.body[1].adHistoricalStatisticsFeature[22] = 23
    i0.body[1].userRealtimeStatisticsFeature = dict()
    i0.body[1].userRealtimeStatisticsFeature[14] = 15
    i0.body[1].userRealtimeStatisticsFeature[24] = 25
    i0.body[1].extenduserRealtimeStatisticsFeature = dict()
    i0.body[1].extenduserRealtimeStatisticsFeature[16] = 17
    i0.body[1].extenduserRealtimeStatisticsFeature[26] = 27
    i0.body[1].adRealtimeStatisticsFeature = dict()
    i0.body[1].adRealtimeStatisticsFeature[18] = 19
    i0.body[1].adRealtimeStatisticsFeature[28] = 29
    i0.body[1].adFormId = "foofoo"
    i0.body[1].materialId = "plastic"
    i0.body[1].creativeId = "giogio"
    i0.body[1].sponsorId = "jojo"

    pret = oProxy.Echo( i0 )
    if pret[ 0 ] < 0 :
        print( "Echo failed with error " + str( pret[0] ) )
        return pret[0]
    i0r = pret[ 1 ][0]
    pprint(vars( i0r ))
    pprint(vars(i0r.body[0]))
    pprint(vars(i0r.body[1]))
    return 0
    
if __name__ == '__main__' :
    ret = MainEntryCli()
    quit( -ret )
