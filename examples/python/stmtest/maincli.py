# GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
# Copyright (C) 2023  zhiming <woodhead99@gmail.com>
# This program can be distributed under the terms of the GNU GPLv3.
# ridlc -pO . ../../stmtest.ridl 
from typing import Tuple
from rpcf.rpcbase import *
from rpcf.proxy import *
from seribase import CSerialBase
from stmteststructs import *
import errno

from StreamTestcli import CStreamTestProxy
import os
import time

import signal
bExit = False
def SigHandler( signum, frame ):
    global bExit
    bExit = True


def MainEntryCli() :
    ret = 0
    signal.signal( signal.SIGINT, SigHandler)
    oContext = PyRpcContext( 'PyRpcProxy' )
    with oContext as ctx:
        if ctx.status < 0:
            ret = ctx.status
            print( os.getpid(), 
                "Error start PyRpcContext %d" % ret )
            return ret
        
        print( "start to work here..." )
        strPath_ = os.path.dirname( os.path.realpath( __file__) )
        strPath_ += '/stmtestdesc.json'
        oProxy_StreamTest = CStreamTestProxy( ctx.pIoMgr,
            strPath_, 'StreamTest' )
        ret = oProxy_StreamTest.GetError()
        if ret < 0 :
            return ret
        
        with oProxy_StreamTest as oProxy:
            global bExit
            try:
                state = oProxy.oInst.GetState()
                while state == cpp.stateRecovery :
                    time.sleep( 1 )
                    state = oProxy.oInst.GetState()
                    if bExit:
                        break
                if state != cpp.stateConnected or bExit:
                    return ErrorCode.ERROR_STATE
                ret = maincli( oProxy )
            except Exception as err:
                print( err )
            
        oProxy_StreamTest = None
    oContext = None
    return ret
    
#------customize the method below for your own purpose----
def maincli( 
    oProxy: CStreamTestProxy ) -> int:
    '''
    adding your code here
    Calling a proxy method like
    'oProxy.Echo( i0 )'
    '''
    while True:
        #Echo
        pret = oProxy.Echo( "Hello, stmtest" )
        if pret[ 0 ] < 0:
            ret = pret[ 0 ]
            break
        OutputMsg( "Echo completed with response " +
            pret[ 1 ][ 0 ] )

        hChannel = oProxy.StartStream()
        if hChannel == ErrorCode.INVALID_HANDLE:
            ret = -errno.EFAULT
            break

        for i in range(100) :
            strMsg = "a message to server " + str( i )
            ret = oProxy.WriteStream(
                hChannel, strMsg.encode() )
            if ret < 0:
                break
            #read response from server synchronously
            pret = oProxy.ReadStream( hChannel )
            if pret[ 0 ] < 0 :
                ret = pret[ 0 ]
                break
            byResp = pret[ 1 ]
            OutputMsg( "Server says (sync): " + byResp.decode() )
            dblVal = i + .1
            strMsg = "a message to server " + str( dblVal )
            ret = oProxy.WriteStreamAsync2(
                hChannel, strMsg.encode() )
            if ret < 0 :
                break
            if ret == ErrorCode.STATUS_PENDING :
                oProxy.WaitForComplete()
                ret = oProxy.GetError()
                if ret < 0:
                    break
        
            pret = oProxy.ReadStreamAsync2( hChannel, 0 )
            if pret[ 0 ] < 0 :
                ret = pret[ 0 ]
                break

            if pret[ 0 ] == ErrorCode.STATUS_PENDING:
                oProxy.WaitForComplete()
                ret = oProxy.GetError()
                if ret < 0:
                    break
            else:
                byResp = pret[ 1 ]
                OutputMsg( "Server says(async): " + byResp.decode() )
        break
    return 0
    
if __name__ == '__main__' :
    ret = MainEntryCli()
    quit( -ret )
