# GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
# Copyright (C) 2023  zhiming <woodhead99@gmail.com>
# This program can be distributed under the terms of the GNU GPLv3.
# ridlc -pO . ../../katest.ridl 
from typing import Tuple
from rpcf.rpcbase import *
from rpcf.proxy import *
from seribase import CSerialBase
from kateststructs import *
import errno

from KeepAlivecli import CKeepAliveProxy
import os
import time

import signal
bExit = False
def SigHandler( signum, frame ):
    global bExit
    bExit = True


def MainEntryCli() :
    ret = 0
    signal.signal( signal.SIGINT, SigHandler)
    oContext = PyRpcContext( 'PyRpcProxy' )
    with oContext as ctx:
        if ctx.status < 0:
            ret = ctx.status
            print( os.getpid(), 
                "Error start PyRpcContext %d" % ret )
            return ret
        
        print( "start to work here..." )
        strPath_ = os.path.dirname( os.path.realpath( __file__) )
        strPath_ += '/katestdesc.json'
        oProxy_KeepAlive = CKeepAliveProxy( ctx.pIoMgr,
            strPath_, 'KeepAlive' )
        ret = oProxy_KeepAlive.GetError()
        if ret < 0 :
            return ret
        
        with oProxy_KeepAlive as oProxy:
            global bExit
            try:
                ret = oProxy.GetError()
                if ret < 0 :
                    raise Exception( 'start proxy failed' )
                state = oProxy.oInst.GetState()
                while state == cpp.stateRecovery :
                    time.sleep( 1 )
                    state = oProxy.oInst.GetState()
                    if bExit:
                        break
                if state != cpp.stateConnected or bExit:
                    return ErrorCode.ERROR_STATE
                ret = maincli( oProxy )
            except Exception as err:
                print( err )
            
        oProxy_KeepAlive = None
    oContext = None
    return ret
    
#------customize the method below for your own purpose----
def maincli( 
    oProxy: CKeepAliveProxy ) -> int:
    '''
    adding your code here
    Calling a proxy method like
    'oProxy.LongWait( i0 )'
    '''
    i0 = "hello, katest!"
    pret = oProxy.LongWait( i0 )
    ret = pret[ 0 ]
    if ret < 0 :
        print( "LongWait failed with error " + str( ret ) )
    else :
        i0r = pret[ 1 ][ 0 ]
        print( "LongWait completed with response " + i0r )

    return 0
    
if __name__ == '__main__' :
    ret = MainEntryCli()
    quit( -ret )
