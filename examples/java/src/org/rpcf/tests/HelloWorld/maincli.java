// GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
// Copyright (C) 2024  zhiming <woodhead99@gmail.com>
// This program can be distributed under the terms of the GNU GPLv3.
// ridlc -jsO . -Porg.rpcf.tests ../../hellowld.ridl 
package org.rpcf.tests.HelloWorld;
import org.rpcf.rpcbase.*;
import java.util.Map;
import java.util.HashMap;
import java.lang.String;
import java.nio.ByteBuffer;

import java.util.concurrent.TimeUnit;
import java.io.File;
import java.io.File;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.lang.Process;
import java.lang.Runtime;
public class maincli
{
    public static JavaRpcContext m_oCtx;
    public static String getDescPath( String strName )
    {
        String strDescPath =
            maincli.class.getProtectionDomain().getCodeSource().getLocation().getPath();
        String strDescPath2 = strDescPath + "/org/rpcf/tests/HelloWorld/" + strName;
        File oFile = new File( strDescPath2 );
        if( oFile.isFile() )
        {
            // System.out.println( "haha " + strDescPath2 + "/" + strName );
            return strDescPath2;
        }
        strDescPath += "/" + strName;
        oFile = new File( strDescPath );
        if( oFile.isFile() )
            return strDescPath;
        strDescPath = CopyResource( strName );
        return strDescPath;
    }
    // copy resource from a jar to the working directory
    public static String CopyResource( String strName )
    {
        boolean bFound = false;
        String strDestPath =
            System.getProperty( "user.dir" );
        InputStream stream = null;
        String strSrcPath = "/static/" + strName;
        boolean bSync = false;
        if( strName == "driver.json" ||
            strName == "driver-cli.json" )
            bSync = true;
        try{
            stream = mainsvr.class.getResourceAsStream( strSrcPath );
            Path dstPath = Paths.get( strDestPath + "/" + strName );
            Files.copy( stream, dstPath, StandardCopyOption.REPLACE_EXISTING );
            bFound = true;
            if( bSync )
            {
                String strSync = "/org/rpcf/tests/HelloWorld/synccfg.py";
                stream = mainsvr.class.getResourceAsStream( strSync );
                dstPath = Paths.get( strDestPath + "/synccfg.py" );
                Files.copy( stream, dstPath, StandardCopyOption.REPLACE_EXISTING );
                String[] commands = { "python3", "./synccfg.py" };
                Process p = Runtime.getRuntime().exec(commands);
            }
        }catch ( Exception e ){
            bFound = false;
        }
        if( !bFound )
            return "";
        return strDestPath + "/" + strName;
    }
    public static void main( String[] args )
    {
        int ret = 0;
        JavaRpcProxy oSvc = null;
        // prepare the init parameters for iomgr
        Map< Integer, Object > oInit =
            new HashMap< Integer, Object >();
        oInit.put( 0, "HelloWorldcli" );
        String strCfgPath = getDescPath( "driver.json");
        if( strCfgPath.length() > 0 )
            oInit.put( 105, strCfgPath );
        m_oCtx = JavaRpcContext.createProxy( oInit );
        if( m_oCtx == null )
        { ret = RC.EFAULT; return; }

        try{
            String strDescPath =
                getDescPath( "HelloWorlddesc.json" );
            if( strDescPath.isEmpty() )
            { ret = -RC.ENOENT; return; }
            
            // create the proxy object
            oSvc = new HelloWorldSvccli(
                m_oCtx.getIoMgr(), 
                strDescPath,
                "HelloWorldSvc" );

            // check if there are errors
            if( RC.ERROR( oSvc.getError() ) )
            { ret = oSvc.getError(); return; }
            
            // start the proxy
            ret = oSvc.start();
            if( RC.ERROR( ret ) )
                return;
            
            // test remote server is not online
            while( oSvc.getState() == RC.stateRecovery )
            try{
                TimeUnit.SECONDS.sleep(1);
            }
            catch( InterruptedException e ){}

            if( oSvc.getState() != RC.stateConnected )
            { ret = RC.ERROR_STATE; return; }
            
            ret = MainCli(
                ( HelloWorldSvccli )oSvc );
        }
        finally
        {
            rpcbase.JavaOutputMsg(
                "Quit with status: " + ret);
            if( oSvc != null )
            {
                oSvc.stop();
                oSvc.setInst( null );
            }
            if( m_oCtx != null )
                m_oCtx.stop();
            System.exit( -ret );
        }
    }
    // ------customize this method for your own purpose----
    public static int MainCli(
        HelloWorldSvccli oSvc )
    {
        int ret = 0;
        do{
            /*// request something from the server */
            JRetVal jret = oSvc.Echo(
                "Hello, World!" );
            if( jret.ERROR() )
            { ret = jret.getError();break; }

            String strResp = (String)jret.getAt(0);
            System.out.println(
                    "The server responded with '" + strResp + "'" );
        }while( false );
        return ret;
    }
}
