// GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
// Copyright (C) 2024  zhiming <woodhead99@gmail.com>
// This program can be distributed under the terms of the GNU GPLv3.
// ridlc -jO . -Porg.rpcf.tests ../../asynctst.ridl 
package org.rpcf.tests.asynctst;

import org.rpcf.rpcbase.*;

import java.util.concurrent.TimeUnit;

public class maincli {
    public static JavaRpcContext m_oCtx;

    public static String getDescPath( String strName )
    {
        String strDescPath =
            maincli.class.getProtectionDomain().getCodeSource().getLocation().getPath();
        String strDescPath2 = strDescPath + "/org/rpcf/tests/asynctst/" + strName;
        java.io.File oFile = new java.io.File( strDescPath2 );
        if( oFile.isFile() )
            return strDescPath2;
        strDescPath += "/" + strName;
        oFile = new java.io.File( strDescPath );
        if( oFile.isFile() )
            return strDescPath;
        return "";
    }
    public static void main( String[] args )
    {
        int ret = 0;
        JavaRpcProxy oSvc = null;
        m_oCtx = JavaRpcContext.createProxy(); 
        if( m_oCtx == null )
        { ret = RC.EFAULT; return; };
        
        try{
            String strDescPath =
                getDescPath( "asynctstdesc.json" );
            if( strDescPath.isEmpty() )
            { ret = -RC.ENOENT; return; }
            
            // create the proxy object
            oSvc = new AsyncTestcli(
                m_oCtx.getIoMgr(), 
                strDescPath,
                "AsyncTest" );

            // check if there are errors
            if( RC.ERROR( oSvc.getError() ) )
            { ret = oSvc.getError(); return; }
            
            // start the proxy
            ret = oSvc.start();
            if( RC.ERROR( ret ) )
                return;
            
            // test remote server is not online
            while( oSvc.getState() == RC.stateRecovery )
            try{
                TimeUnit.SECONDS.sleep(1);
            }
            catch( InterruptedException e ){};
            
            if( oSvc.getState() != RC.stateConnected )
            { ret = RC.ERROR_STATE; return; }
            
            ret = MainCli(
                ( AsyncTestcli )oSvc );
        }
        finally
        {
            if( oSvc != null )
            {
                rpcbase.JavaOutputMsg(
                    "stop the proxy..." + ret);
                oSvc.stop();
                oSvc.setInst( null );
            }
            if( m_oCtx != null )
            {
                rpcbase.JavaOutputMsg(
                    "stop the iomgr..." + ret);
                m_oCtx.stop();
            }
            rpcbase.JavaOutputMsg(
                "Quit with status: " + ret);
            System.exit( -ret );
        }
    }
    // ------customize this method for your own purpose----
    public static int MainCli(
        AsyncTestcli oSvcCli )
    {
        int ret = 0;
        do{
            JRetVal oCtx = new JRetVal();
            JRetVal jret = oSvcCli.LongWaitNoParam(oCtx);
            if (jret.ERROR()) 
            {
                ret = jret.getError();
                break;
            }

            if (jret.isPending())
            {
                try{
                    // wait for notification from onLongWaitNoParamComplete
                    oSvcCli.m_sem.acquire();
                }catch(InterruptedException var6){
                }
            }

            rpcbase.JavaOutputMsg("main thread: LongWaitNoParam completed with status " + oCtx.getError());
            jret = oSvcCli.LongWait( oCtx, "hello, LongWait");
            if (jret.ERROR()) 
            {
                ret = jret.getError();
                break;
            }

            if (jret.isPending())
            {
                try{
                    // wait for notification from onLongWaitComplete
                    oSvcCli.m_sem.acquire();
                }catch(InterruptedException var6){
                }
            }
            
            rpcbase.JavaOutputMsg(
                String.format("main thread: LongWait completed with status " + oCtx.getError() ));

            jret = oSvcCli.LongWait2("hello, LongWait2");
            if (jret.ERROR()) 
            {
                ret = jret.getError();
                break;
            }
            String strResp = (String)jret.getAt(0);
            rpcbase.JavaOutputMsg(
                String.format("LongWait2 completed with resp %s", strResp));
        }while( false );

        return ret;
    }
}
