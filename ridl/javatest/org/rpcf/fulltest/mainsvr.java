// GENERATED BY RIDLC. MAKE SURE TO BACKUP BEFORE RE-COMPILING.
package org.rpcf.fulltest;
import org.rpcf.rpcbase.*;
import java.nio.charset.StandardCharsets;
import java.lang.String;
import java.util.concurrent.TimeUnit;
import java.util.Arrays;
public class mainsvr
{
    public static JavaRpcContext m_oCtx;
    public static String getDescPath( String strName )
    {
        String strDescPath =
            mainsvr.class.getProtectionDomain().getCodeSource().getLocation().getPath();
        String strDescPath2 = strDescPath + "/org/rpcf/fulltest/" + strName;
        java.io.File oFile = new java.io.File( strDescPath2 );
        if( oFile.isFile() )
            return strDescPath2;
        strDescPath += "/" + strName;
        oFile = new java.io.File( strDescPath );
        if( oFile.isFile() )
            return strDescPath;
        return "";
    }
    public static void main( String[] args )
    {
        int ret = 0;
        m_oCtx = JavaRpcContext.createServer(); 
        if( m_oCtx == null )
            System.exit( RC.EFAULT );

        String strDescPath =
            getDescPath( "fulltestdesc.json" );
        if( strDescPath.isEmpty() )
            System.exit( RC.ENOENT );
        SimpFileSvcsvr oSvcSvr = null;
        StreamSvcsvr oStmSvr = null;
        do {
            // create the service object
            oSvcSvr = new SimpFileSvcsvr(
                    m_oCtx.getIoMgr(),
                    strDescPath,
                    "SimpFileSvc");

            // check if there are errors
            if (RC.ERROR(oSvcSvr.getError()))
                break;
            // create the service object
            oStmSvr = new StreamSvcsvr(
                    m_oCtx.getIoMgr(),
                    strDescPath,
                    "StreamSvc");
            if (RC.ERROR(oStmSvr.getError()))
                break;

            ret = oSvcSvr.start();
            if (RC.ERROR(ret))
                break;

            ret = oStmSvr.start();
            if( RC.ERROR( ret ))
                break;

            int count = 0;
            JRetVal jret = null;

            while (RC.stateConnected == oSvcSvr.getState() &&
                    RC.stateConnected == oStmSvr.getState()) {
                count++;
                if (oStmSvr.m_hChannel == 0) {
                    try {
                        TimeUnit.SECONDS.sleep(1 );
                    }catch ( InterruptedException e ){}
                    oSvcSvr.OnHelloWorld( null, "Hello, World!");
                }
                else if( oStmSvr.m_curTest == 0 )
                {
                    jret = oStmSvr.readStreamNoWait( oStmSvr.m_hChannel );
                    if( jret.ERROR() )
                    {
                        rpcbase.JavaOutputMsg( "error readStreamNoWait" );
                        try{
                            TimeUnit.SECONDS.sleep(1);
                        }
                        catch( InterruptedException e){}
                        continue;
                    }
                    // the first message
                    byte[] buf = ( byte[]) jret.getAt( 0 );
                    String strMsg = Arrays.toString(buf);
                    rpcbase.JavaOutputMsg( "received msg " + strMsg );
                    buf = "greeting from server".getBytes(StandardCharsets.UTF_8);
                    oStmSvr.writeStream( oStmSvr.m_hChannel, buf );
                }
                else if( oStmSvr.m_curTest == 1 )
                {
                    // upload test
                    jret = oStmSvr.readStream( oStmSvr.m_hChannel );
                    if ( jret.ERROR()) {
                        try{
                            TimeUnit.SECONDS.sleep(1);
                        }
                        catch( InterruptedException e){}
                        oSvcSvr.OnHelloWorld( null,
                                "Hello, World " + Integer.toString( count ));
                        continue;
                    }
                    byte[] buf = ( byte[] )jret.getAt( 0);
                    oStmSvr.m_curSize -= buf.length;
                    if( oStmSvr.m_curSize == 0 )
                    {
                        rpcbase.JavaOutputMsg(
                                String.format("test %d complete", oStmSvr.m_numTest));
                        rpcbase.JavaOutputMsg(
                                String.format("%d bytes uploaded", oStmSvr.m_totalSize));
                        oStmSvr.m_curTest = 0;
                        buf = "ROK".getBytes(StandardCharsets.UTF_8);
                        oStmSvr.writeStream( oStmSvr.m_hChannel, buf );
                    }
                    else if( oStmSvr.m_curSize < 0 )
                    {
                        rpcbase.JavaOutputMsg(
                                String.format( "error size is %d", oStmSvr.m_curSize));
                    }
                }
                else if( oStmSvr.m_curTest == 2 )
                {
                    // download test
                    ret = 0;
                    while( oStmSvr.m_curSize > 0 )
                    {
                        int size = ( int )oStmSvr.m_curSize;
                        if( size > 4 * 1024 * 1024 )
                            size = 4 * 1024 * 1024;
                        byte[] buf = new byte[ size ];
                        ret = oStmSvr.writeStream(
                                oStmSvr.m_hChannel, buf );
                        if( RC.ERROR(ret))
                            break;
                        oStmSvr.m_curSize -= size;
                    }
                    if( RC.ERROR(ret))
                    {
                        rpcbase.JavaOutputMsg(
                                String.format("error send bytes %d", ret) );
                        try{
                            TimeUnit.SECONDS.sleep(1);
                        }
                        catch( InterruptedException e){}
                        oSvcSvr.OnHelloWorld( null,
                                "Hello, World " + Integer.toString( count ));
                        oStmSvr.m_curTest = 0;
                        continue;
                    }
                    if( oStmSvr.m_curSize == 0 )
                    {
                        rpcbase.JavaOutputMsg(
                                String.format("test %d complete", oStmSvr.m_numTest));
                        rpcbase.JavaOutputMsg(
                                String.format("%d bytes uploaded", oStmSvr.m_totalSize));
                        oStmSvr.m_curTest = 0;
                        jret = oStmSvr.readStream(oStmSvr.m_hChannel);
                        if(jret.ERROR())
                            rpcbase.JavaOutputMsg( "receiving ACK failed" );
                        else {
                            byte[] buf = ( byte[]) jret.getAt(0);
                            rpcbase.JavaOutputMsg(Arrays.toString(buf));
                        }
                    }
                    else if( oStmSvr.m_curSize < 0 )
                    {
                        rpcbase.JavaOutputMsg(
                                String.format("found error size %d", oStmSvr.m_curSize));
                        ret = -RC.ERANGE;
                    }
                }
            }

        }while( false );

        if( oStmSvr != null )
            oStmSvr.stop();
        if( oSvcSvr != null )
            oSvcSvr.stop();
        m_oCtx.stop();
        return;
    }
}
