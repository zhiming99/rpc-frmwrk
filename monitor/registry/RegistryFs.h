// GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
// Copyright (C) 2024  zhiming <woodhead99@gmail.com>
// This program can be distributed under the terms of the GNU GPLv3.
// ridlc -O . -I ../registry -l regfs.ridl 
#pragma once
#include <string>
#include "rpc.h"
#include "ifhelper.h"
#include "counters.h"
#include "seribase.h"

#define DECLPTRO( _type, _name ) \
    ObjPtr p##_name;\
    p##_name.NewObj( clsid( _type ) );\
    _type& _name=*(_type*)p##_name;

namespace rpcf
{

enum EnumMyClsid
{
    DECL_CLSID( CRegFsSvcLocal_SvrSkel ) = 0xDFD322D5,
    DECL_CLSID( CRegFsSvcLocal_SvrImpl ) = 0xDFD322D6,
    
    DECL_IID( IRegFsLocal ),

    DECL_CLSID( TimeSpec ) = 0x8FADC13F,
    DECL_CLSID( FileStat ) = 0x95968E4E,
};

struct TimeSpec
    : public CStructBase
{
    typedef CStructBase super;
    
    //Message identity
    guint32 m_dwMsgId = clsid( TimeSpec );
    std::string m_strMsgId = "RegistryFs::TimeSpec";
    // data members
    guint32 tv_sec = 0;
    guint32 tv_nsec = 0;
    
    // Constructor
    TimeSpec() : super()
    { SetClassId( ( EnumClsid )m_dwMsgId ); }

    // methods
    gint32 Serialize(
        BufPtr& pBuf_ ) override;
    
    gint32 Deserialize(
        BufPtr& pBuf_ ) override;
    
    guint32 GetMsgId() const override
    { return m_dwMsgId; }
    
    const std::string&
        GetMsgName() const override
    { return m_strMsgId; }
    
    TimeSpec& operator=(
        const TimeSpec& rhs );
};

struct FileStat
    : public CStructBase
{
    typedef CStructBase super;
    
    //Message identity
    guint32 m_dwMsgId = clsid( FileStat );
    std::string m_strMsgId = "RegistryFs::FileStat";
    // data members
    guint32 st_dev = 0;
    guint32 st_ino = 0;
    guint32 st_mode = 0;
    guint32 st_nlink = 0;
    guint32 st_uid = 0;
    guint32 st_gid = 0;
    guint32 st_rdev = 0;
    guint32 st_size = 0;
    guint32 st_blksize = 0;
    guint32 st_blocks = 0;
    TimeSpec st_atim;
    TimeSpec st_mtim;
    TimeSpec st_ctim;
    
    // Constructor
    FileStat() : super()
    { SetClassId( ( EnumClsid )m_dwMsgId ); }

    // methods
    gint32 Serialize(
        BufPtr& pBuf_ ) override;
    
    gint32 Deserialize(
        BufPtr& pBuf_ ) override;
    
    guint32 GetMsgId() const override
    { return m_dwMsgId; }
    
    const std::string&
        GetMsgName() const override
    { return m_strMsgId; }
    
    FileStat& operator=(
        const FileStat& rhs );
};

class IIRegFsLocal_SImpl
    : public virtual CAggInterfaceServer
{
    public:
    typedef CAggInterfaceServer super;
    IIRegFsLocal_SImpl( const IConfigDb* pCfg ) :
        super( pCfg )
        {}
    gint32 InitUserFuncs();
    
    const EnumClsid GetIid() const override
    { return iid( IRegFsLocal ); }

    //RPC Sync Req Handler Wrapper
    gint32 CreateFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 CreateFile(
        const std::string& strPath,
        guint32 dwMode,
        guint32 dwFlags,
        guint64& hFile ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 MakeDirWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 MakeDir(
        const std::string& strPath,
        guint32 dwMode ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 OpenFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 OpenFile(
        const std::string& strPath,
        guint32 dwFlags,
        guint64& hFile ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 CloseFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 CloseFile(
        guint64 hFile ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 RemoveFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 RemoveFile(
        const std::string& strPath ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 ReadFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 ReadFile(
        guint64 hFile,
        guint32 dwSize,
        guint32 dwOff,
        BufPtr& buffer ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 WriteFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 WriteFile(
        guint64 hFile,
        BufPtr& buffer,
        guint32 dwOff,
        guint32& dwSizeWrite ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 TruncateWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 Truncate(
        guint64 hFile,
        guint32 dwOff ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 CloseDirWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 CloseDir(
        guint64 hFile ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 RemoveDirWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 RemoveDir(
        const std::string& strPath ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 SetGidWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 SetGid(
        const std::string& strPath,
        guint32 wGid ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 SetUidWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 SetUid(
        const std::string& strPath,
        guint32 wUid ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 GetGidWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 GetGid(
        const std::string& strPath,
        guint32& gid ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 GetUidWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 GetUid(
        const std::string& strPath,
        guint32& uid ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 SymLinkWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 SymLink(
        const std::string& strSrcPath,
        const std::string& strDestPath ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 GetValueWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 GetValue(
        const std::string& strPath,
        std::string& strJson ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 SetValueWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 SetValue(
        const std::string& strPath,
        const std::string& strJson ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 ChmodWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 Chmod(
        const std::string& strPath,
        guint32 dwMode ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 ChownWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 Chown(
        const std::string& strPath,
        guint32 dwUid,
        guint32 dwGid ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 ReadLinkWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 ReadLink(
        const std::string& strPath,
        BufPtr& buf ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 RenameWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 Rename(
        const std::string& szFrom,
        const std::string& szTo ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 FlushWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 Flush(
        guint32 dwFlags ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 AccessWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 Access(
        const std::string& strPath,
        guint32 dwFlags ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 GetAttrWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 GetAttr(
        const std::string& strPath,
        FileStat& oStat ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 ReadDirWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 ReadDir(
        guint64 hDir,
        std::vector<FileStat>& vecDirEnt ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 OpenDirWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 OpenDir(
        const std::string& strPath,
        guint32 dwFlags,
        guint64& hDir ) = 0;
    
    //RPC Sync Req Handler Wrapper
    gint32 ExecBatWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    //TODO: implement me
    virtual gint32 ExecBat(
        const std::string& strJson ) = 0;
    
};

DECLARE_AGGREGATED_SERVER(
    CRegFsSvcLocal_SvrSkel,
    CStatCountersServer,
    IIRegFsLocal_SImpl );

}
