#!/bin/bash

script_dir=$(dirname "$(realpath "${BASH_SOURCE[0]}")")
if [ -f $script_dir/rpcf/showapp.sh ]; then
    cmddir=$script_dir/rpcf 
elif [ -f $script_dir/showapp.sh ]; then
    cmddir=$script_dir
else
    echo Error cannot find rpc-frmwrk installation
    exit 1
fi

if [[ -f ../../ipc/driver.json ]]; then
    cfgPath="`pwd`/../../ipc"
elif [[ "$script_dir" == "/usr/bin" ]]; then
    cfgPath="/etc/rpcf"
elif [[ "$script_dir" == "/usr/local/bin" ]]; then
    cfgPath="/usr/local/etc/rpcf"
fi
#echo cmddir=$cmddir
source ${cmddir}/appfuncs.sh

# rpcfctl - rpc-frmwrk Control Utility
# Usage: rpcfctl <start|stop|status|list> [appname]

function usage() {
    cat <<EOF
Usage: $0 <command> [arguments]

Commands:
    start <appname>      Start the application <appname>.
                         Checks if the application is already running; if not,
                         retrieves its command line and working directory from
                         the registry and starts it in the background.

    stop <appname>       Stop the application <appname>.
                         Sends a SIGINT to the application's process for
                         graceful shutdown.

    kill <appname>       Forcefully stop the application <appname>.
                         Sends a SIGKILL to the application's process,
                         terminating it immediately.

    restart <appname>    Restart the application <appname>.
                         Stops the application if running, waits for it to exit,
                         then starts it again.

    status <appname>     Show status of the application <appname>.
                         Displays whether the application is running and its
                         current status.

    list                 List all managed applications.
                         Shows all applications registered in the app registry.

    startall             Start all managed applications.
                         Starts core services first, then all other registered
                         applications.

    stopall              Stop all managed applications.
                         Stops all applications except core services first, then
                         stops the core services.

    restartall           Restart all managed applications.
                         Stops all applications and then starts them again.

    addapp <appname>     Add a new application <appname> to the app registry.

    rmapp <appname>      Remove the application <appname> from the app registry.

    initapps             Initialize (clear) the app registry.
                         WARNING: This will clear your app registry.

    inituser             Initialize (clear) the user registry.
                         WARNING: This will clear your user registry.

    initsvr              Initialize (clear) both the app registry and user
                         registry on the server side.
    initcli              Initialize (clear) both client registry on the client side
                         
    importkey            import SSL keys.
                         command line is "rpcfctl importkey <openssl|gmssl> <private key> <public cert> [<cacert file>]",

                         If you don't know about openssl or gmssl, just use
                         openssl. key/cert should be in PEM format to import.
                         The key/cert is now the rpc-frmwrk's SSL connection
                         key/cert. And be aware that the SSL key/cert used by
                         'rpc-frmwrk' is not necessarily the one used by your
                         webserver if WebSocket connection is enabled.


    genkey               Generate self-signed public key/cert pair from command
                         line. Note that, The newly generated key/cert will not
                         automatically be applied to the SSL connection. You
                         need to use either 'rpcfg.py' or the 'importkey'
                         subcommand to get it done. 

                         command line is "rpcfctl genkey <openssl|gmssl> <#client keys> <#server keys> [<DNS name>]"
                         example: rpcfctl genkey openssl 1 1

    login                Authenticate the user with the authentication mechanism
                         specified in 'driver.json'

                         For SimpAuth(Password), 'login' saves the credential in
                         a secure way to allow non-js client to connect to
                         rpc-frmwrk server. JS client will login from the
                         browser.

                         For Kerberos, 'login' preforms the preauth login with
                         'kinit', to get the ticket-grant-ticket from KDC.  For
                         OAuth2, 'login' will initiate the
                         authorization-code-grant process to get a security
                         token ( not the access token ) from the rpc-frmwrk.
                         With which, the non-js client can connect to the
                         rpc-frmwrk.


    -h, --help           Show this help message and exit.

EOF
}

if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi

cmd="$1"
shift

function is_app_online()
{
    online=`bash $cmddir/showapp.sh $1 | grep 'status: online'`
    if [[ "x$online" == "xstatus: online" ]]; then
        return 0
    fi
    return 1
}

case "$cmd" in
    start)
        if [[ $# -lt 1 ]]; then
            echo "Error: appname required for 'start'"
            usage
            exit 1
        fi
        appname="$1"
        echo "Starting application: $appname"
        if is_app_online $appname; then
            echo "Error $appname is still running"
            exit 1
        fi
        cmdline=`bash $cmddir/getpv.sh $appname cmdline | awk -F: '{print $2}'`
        working_dir=`bash $cmddir/getpv.sh $appname working_dir | awk -F: '{print $2}'`
        if [[ "x$cmdline" == "x" ]] || [[ "x$working_dir" == "x" ]]; then
            echo "Error bad command line to start $appname"
            exit 1
        fi
        if [ ! -d $working_dir ]; then
            echo "Error bad working directory to start $appname"
            exit 1
        fi
        cd $working_dir || exit 1
        echo $cmdline
        setsid -f $cmdline
        ;;
    stop)
        if [[ $# -lt 1 ]]; then
            echo "Error: appname required for 'stop'"
            usage
            exit 1
        fi
        appname="$1"
        echo "Stopping application: $appname"
        if ! is_app_online $appname; then
            echo "Error $appname is already stopped"
            exit 1
        fi
        if [[ "x$appname" == "xappmonsvr1" ]]; then
            if check_appreg_mount; then
                if [ -d ${rootdir}/../appreg ]; then
                    rootdir=$(dirname $rootdir)
                    fusermount3 -u ${rootdir}
                    echo
                    exit 0
                fi
                undo_check_appreg_mount
            fi
        fi
        pid=`bash $cmddir/getpv.sh $appname pid | awk -F: '{print $2}'`
        if [[ "x$pid" != "x" ]]; then
            kill -2 $pid
        else
            echo Error failed to stop $appname
        fi
        ;;
    kill)
        if [[ $# -lt 1 ]]; then
            echo "Error: appname required for 'stop'"
            usage
            exit 1
        fi
        appname="$1"
        echo "Stopping application: $appname"
        if ! is_app_online $appname; then
            echo "Error $appname is already stopped"
            exit 1
        fi
        pid=`bash $cmddir/getpv.sh $appname pid | awk -F: '{print $2}'`
        kill -9 $pid
        ;;
    restart)
        if [[ $# -lt 1 ]]; then
            echo "Error: appname required for 'stop'"
            usage
            exit 1
        fi
        appname="$1"
        if is_app_online $appname; then
            pid=$(bash $cmddir/getpv.sh $appname pid | awk -F: '{print $2}')
            if [[ "x$pid" != "x" ]]; then
                kill -2 $pid
            fi
        fi
        if [[ "x$pid" != "x" ]]; then
            for ((i=0;i<10;i++)); do
                if [[ -d /proc/$pid ]]; then
                    echo waiting $appname to quit...
                    sleep 1
                    continue
                fi
                break
            done
            if [[ -d /proc/$pid ]];then
                kill -9 $pid
                sleep 1
            fi
        fi
        bash $script_dir/rpcfctl start $appname
        ;;
    status)
        if [[ $# -lt 1 ]]; then
            echo "Error: appname required for 'status'"
            usage
            exit 1
        fi
        appname="$1"
        echo "Status of application: $appname"
        bash $cmddir/showapp.sh $appname
        ;;
    list)
        echo "Listing all managed applications"
        bash $cmddir/listapps.sh
        ;;
    startall)
        bash rpcfctl start appmonsvr1
        bash rpcfctl start loggersvr1
        bash rpcfctl start timer1
        bash rpcfctl start rpcrouter1
        if check_appreg_mount; then
            pushd ${rootdir}/apps
            arrApps=$(ls -d * )
            for skip in appmonsvr1 timer1 loggersvr1 rpcrouter1; do
                arrApps=$(echo "$arrApps" | tr ' ' '\n' | grep -vx "$skip" | tr '\n' ' ')
            done
            arrApps=$(echo "$arrApps") # Remove trailing spaces
            for appName in $arrApps; do
                if [ "x$appName" != "x" ]; then
                    bash $script_dir/rpcfctl start $appName
                fi
            done
            popd
            undo_check_appreg_mount
        fi
        ;;
    stopall)
        if check_appreg_mount; then
            pushd ${rootdir}/apps
            arrApps=$(ls -d * )
            for skip in appmonsvr1 timer1 loggersvr1 rpcrouter1; do
                arrApps=$(echo "$arrApps" | tr ' ' '\n' | grep -vx "$skip" | tr '\n' ' ')
            done
            arrApps=$(echo "$arrApps") # Remove trailing spaces
            for appName in $arrApps; do
                if [ "x$appName" != "x" ]; then
                    echo "Stopping application: $appName"
                    bash $script_dir/rpcfctl stop $appName
                fi
            done
            popd
            undo_check_appreg_mount
        fi
        bash rpcfctl stop rpcrouter1
        bash rpcfctl stop timer1
        bash rpcfctl stop loggersvr1
        bash rpcfctl stop appmonsvr1
        ;;
    restartall)
        echo "stopping all the applications..."
        bash rpcfctl stopall
        echo "starting all the applications..."
        bash rpcfctl startall
        ;;
    addapp | add)
        if [[ $# -lt 1 ]]; then
            echo "Error: appname required for 'addapp/add'"
            usage
            exit 1
        fi
        if bash $cmddir/addapp.sh $1; then
            if is_app_online loggersvr1; then
                rpcf_sendlog -f rpcfctl -l 254 -t INFO -n rpcfctl -p $$ "Added application $1 by rpcfctl"
            fi
        fi
        ;;
    rmapp | rm)
        if [[ $# -lt 1 ]]; then
            echo "Error: appname required for 'rmapp/rm' command"
            usage
            exit 1
        fi
        if is_app_online $1; then
            echo Error: please stop the application before removal.
            exit 1
        fi
        if bash $cmddir/rmapp.sh $1; then
            if is_app_online loggersvr1; then
                rpcf_sendlog -f rpcfctl -l 270 -t INFO -n rpcfctl -p $$ "Removed application $1 by rpcfctl"
            fi
        fi
        ;;
    showapp)
        if [[ $# -lt 1 ]]; then
            echo "Error: appname required for 'showapp'"
            usage
            exit 1
        fi
        bash $cmddir/showapp.sh $1;
        ;;

    initapps)
        echo Warning 'initapps' will clear the app registry,
        bash $cmddir/initappreg.sh
        ;;
    inituser)
        echo "Warning 'inituser' will clear the user registry"
        bash $cmddir/inituser.sh
        ;;
    initsvr)
        bash $cmddir/inituser.sh && bash $cmddir/initappreg.sh
        ;;
    initcli)
        authmech=`rpcfctl authmech`
        if [[ "x$xauthmech" == "xSimpAuth" ]] ||
            [[ "x$xauthmech" == "xOAuth2" ]]; then
            regfsmnt -i $HOME/rpcf/clientreg.dat
            rpcfctl genkey openssl 1 1
            rpcfctl genkey gmssl 1 1
        fi
        ;;
    importkey | import)
        cmdline="rpcfctl importkey <openssl|gmssl> <private key file> <public cert file> [<cacert file>]"
        if [[ $# -lt 3 ]]; then
            echo "Error: Missing argument" 
            echo $cmdline
            exit 1
        fi
        if [[ "x$1" == "xopenssl" ]]; then
            targetdir=$HOME/.rpcf/openssl
        elif [[ "x$1" == "xgmssl" ]]; then
            targetdir=$HOME/.rpcf/gmssl
        else
            echo Error: Unknown cryptography type
            echo $cmdline
            exit 1
        fi

        if [[ ! -d $targetdir ]]; then
            mkdir -p $targetdir || exit 1
        fi
        src=$(realpath $2)
        dest=$(realpath $targetdir/$(basename $2))
        if [[ "$src" != "$dest" ]]; then
            cp "$2" "$targetdir/" || exit 1
            chmod 600 "$targetdir/$(basename $2)"
        fi
        src=$(realpath $3)
        dest=$(realpath $targetdir/$(basename $3))
        if [[ "$dest" != "$src" ]]; then
            cp "$3" "$targetdir/" || exit 1
            chmod 644 "$targetdir/$(basename $3)"
        fi
        if [[ "x$4" != "x" ]]; then
            src=$(realpath $4)
            dest=$(realpath $targetdir/$(basename $4))
            if [[ "$src" != "$dest" ]]; then
                cp "$4" "$targetdir/" || exit 1
                chmod 644 "$targetdir/$(basename $4)"
            fi
            caroot="$targetdir/$(basename $4)"
        fi
        bRoot="false"
        drvpath=$cfgPath/drver.json
        if [[ "$script_dir" == "/usr/bin" ]] || [[ "$script_dir" == "/usr/local/bin" ]]; then
            bRoot="true"
        else
            echo Error: unable to find driver.json to update
            exit 1
        fi
        if [[ "$bRoot" == "false" ]]; then
            SUDOCMD=
        else
            if which sudo; then
                SUDOCMD=sudo
            fi
        fi
        if $SUDOCMD python3 $cmddir/updatekeys.py $drvpath $1 $targetdir/$(basename $2) $targetdir/$(basename $3) $caroot; then
            echo "Imported keys to $targetdir successfully."
            echo "rpc-frmwrk will use the newly imported key for SSL connection"
            echo "And don't forget to update your web server configuration if necessary"
        fi
        ;;
    genkey)
        # generate self-signed openssl RSA key
        cmdline="rpcfctl genkey <openssl|gmssl> <#client keys> <#server keys> [<DNS name>]"
        if [[ $# -lt 3 ]]; then
            echo "Error: Missing argument" 
            echo $cmdline
            exit 1
        fi
        if [[ "x$1" == "xopenssl" ]]; then
            if bash $cmddir/opensslkey.sh $HOME/.rpcf/openssl $2 $3 $4; then
                clidx=`cat $HOME/.rpcf/openssl/clidx`
                svridx=`cat $HOME/.rpcf/openssl/svridx`
                echo Successfully generated OpenSSL key/cert to $HOME/.rpcf/openssl
                echo server key/cert package is serverkeys-$svridx.tar.gz
                echo client key/cert package is clientkeys-$clidx.tar.gz
            else
                echo Error failed to generate OpenSSL key/cert
            fi
        elif [[ "x$1" == "xgmssl" ]]; then
            if bash $cmddir/gmsslkey.sh $HOME/.rpcf/gmssl $2 $3; then
                clidx=`cat $HOME/.rpcf/gmssl/clidx`
                svridx=`cat $HOME/.rpcf/gmssl/svridx`
                echo Successfully generated GmSSL key/cert to $HOME/.rpcf/gmssl
                echo server key/cert package is serverkeys-$svridx.tar.gz
                echo client key/cert package is clientkeys-$clidx.tar.gz
            else
                echo Error failed to generate GmSSL key/cert
            fi
        fi
        ;;
    printcert)
        cmdline="rpcfctl printcert <openssl|gmssl> <cert file>"
        if [[ $# -lt 2 ]]; then
            echo "Error: Missing argument" 
            echo $cmdline
            exit 1
        fi
        if [[ "x$1" == "xopenssl" ]]; then
            openssl x509 -inform pem -noout -text -in "$2"
        elif [[ "x$1" == "xgmssl" ]]; then
            gmssl certparse < "$2"
        else
            echo invalid cryptography type $1
        fi
        ;;
    adduser)
        cmdline="rpcfctl adduser <user name>"
        if [[ $# -lt 1 ]]; then
            echo "Error: Missing argument" 
            echo $cmdline
            exit 1
        fi
        bash $cmddir/rpcfaddu.sh $1
        ;;
    rmuser)
        cmdline="rpcfctl rmuser <user name>"
        if [[ $# -lt 1 ]]; then
            echo "Error: Missing argument" 
            echo $cmdline
            exit 1
        fi
        bash $cmddir/rpcfrmu.sh $1
        ;;
    showuser)
        cmdline="rpcfctl showuser <user name>"
        if [[ $# -lt 1 ]]; then
            echo "Error: Missing argument" 
            echo $cmdline
            exit 1
        fi
        bash $cmddir/rpcfshow.sh -u $1
        ;;
    listuser)
        cmdline="rpcfctl listuser"
        bash $cmddir/rpcfshow.sh -l
        ;;
    joingroup)
        cmdline="rpcfctl joingroup <group name> <user name>"
        if [[ $# -lt 2 ]]; then
            echo "Error: Missing argument" 
            echo $cmdline
            exit 1
        fi
        bash $cmddir/rpcfmodu.sh -g $1 $2
        ;;
    leavegroup)
        cmdline="rpcfctl leavegroup <group name> <user name>"
        if [[ $# -lt 2 ]]; then
            echo "Error: Missing argument" 
            echo $cmdline
            exit 1
        fi
        bash $cmddir/rpcfmodu.sh -ig $1 $2
        ;;
    addgroup)
        cmdline="rpcfctl addgroup <group name>"
        if [[ $# -lt 1 ]]; then
            echo "Error: Missing argument" 
            echo $cmdline
            exit 1
        fi
        bash $cmddir/rpcfaddg.sh $1
        ;;
    rmgroup)
        cmdline="rpcfctl rmgroup <group name>"
        if [[ $# -lt 1 ]]; then
            echo "Error: Missing argument" 
            echo $cmdline
            exit 1
        fi
        bash $cmddir/rpcfrmg.sh $1
        ;;
    showgroup)
        cmdline="rpcfctl showgroup <group name>"
        if [[ $# -lt 1 ]]; then
            echo "Error: Missing argument" 
            echo $cmdline
            exit 1
        fi
        bash $cmddir/rpcfshow.sh -g $1
        ;;
    listgroup)
        cmdline="rpcfctl listgroup"
        bash $cmddir/rpcfshow.sh -r
        ;;
    authmech)
        cmdline="rpcfctl authmech"
        drvpath=$cfgPath/driver.json
        context=`grep -A2 'HasAuth.*true' $drvpath`
        if [[ -z $context ]]; then
            echo None
            exit 1;
        fi
        context=`echo $context | sed 's/,/\r\n/g'`
        mech=`cat <<< $context | grep 'AuthMech' | awk -F: '{print $2}' | sed 's/[",]//g'`;
        if [[ "x$mech" == "x" ]]; then
            echo None
            exit 1;
        else
            echo $mech
        fi
        ;;
    geninitcfg)
        cmdline="rpcfctl geninitcfg [<output file>]"
        drvpath=$cfgPath/driver.json
        if [[ $# -gt 0 ]]; then
            python3 $cmddir/geninitcfg.py $drvpath $1
        else
            python3 $cmddir/geninitcfg.py $drvpath
        fi
        ;;

    cfgweb)
        #updating webserver config, nginx or apache
        rpcfctl geninitcfg > /tmp/initcfg.json
        python3 $cmddir/updwscfg.py /tmp/initcfg.json
        #rm /tmp/initcfg.json
        ;;
    cfgkrb5)
        #updating kerberos config
        authMech=`rpcfctl authmech`
        if [[ "x$authMech" != "xkrb5" ]]; then
            echo "Kerberos is not current authentication mechanism"
            exit 1
        fi
        pushd $cmddir
        rpcfctl geninitcfg > /tmp/initcfg.json
        python3 -c 'import sys; from updk5cfg import ConfigAuthServer; ConfigAuthServer(sys.argv[1]))' "/tmp/initcfg.json"
        rm /tmp/initcfg.json
        popd
        ;;
    login)
        mech=`rpcfctl authmech`
        if [[ "xmech" == "xSimpAuth" ]]; then
            cmdline="rpcfctl login <username name>"
            if [[ $# -lt 1 ]]; then
                echo "Error: Missing argument" 
                echo $cmdline
                exit 1
            fi
            $cmddir/sinit -s $1
        elif [[ "xmech" == "xOAuth2" ]]; then
            cmdline="rpcfctl login <auth url>"
            if [[ $# -lt 1 ]]; then
                echo "Error: Missing argument" 
                echo $cmdline
                exit 1
            fi
            python3 -m oinit $1
        elif [[ "xmech" == "xKerberos" ]]; then
            cmdline="rpcfctl login <user name>"
            if [[ $# -lt 1 ]]; then
                echo "Error: Missing argument" 
                echo $cmdline
                exit 1
            fi
            kinit -kt $HOME/rpcf/krb5cli.keytab $1
        fi
        ;;
    *)
        echo "Unknown command: $cmd"
        usage
        exit 1
        ;;
esac
