// GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
// Copyright (C) 2024  zhiming <woodhead99@gmail.com>
// This program can be distributed under the terms of the GNU GPLv3.
// ridlc -sO . ./appmon.ridl 
#pragma once
#include <string>
#include "rpc.h"
#include "ifhelper.h"
#include "counters.h"
#include "streamex.h"

#define DECLPTRO( _type, _name ) \
    ObjPtr p##_name;\
    p##_name.NewObj( clsid( _type ) );\
    _type& _name=*(_type*)p##_name;

enum EnumMyClsid
{
    DECL_CLSID( CAppMonitor_CliSkel ) = 0x048589C2,
    DECL_CLSID( CAppMonitor_SvrSkel ),
    DECL_CLSID( CAppMonitor_CliImpl ),
    DECL_CLSID( CAppMonitor_SvrImpl ),
    DECL_CLSID( CAppMonitor_ChannelCli ),
    DECL_CLSID( CAppMonitor_ChannelSvr ),
    
    DECL_IID( IRegFsRemote ),
    DECL_IID( IAppMonitor ),

    DECL_CLSID( TimeSpec ) = 0xF9D2D0C1,
    DECL_CLSID( FileStat ) = 0x0E43FB2D,
    DECL_CLSID( KeyValue ) = 0xB959BDFE,
};

struct TimeSpec
    : public CStructBase
{
    typedef CStructBase super;
    
    //Message identity
    guint32 m_dwMsgId = clsid( TimeSpec );
    std::string m_strMsgId = "appmon::TimeSpec";
    // data members
    guint32 tv_sec = 0;
    guint32 tv_nsec = 0;
    
    // Constructor
    TimeSpec() : super()
    { SetClassId( ( EnumClsid )m_dwMsgId ); }

    // methods
    gint32 Serialize(
        BufPtr& pBuf_ ) override;
    
    gint32 Deserialize(
        BufPtr& pBuf_ ) override;
    
    gint32 Serialize(
        CBuffer& oBuf_ ) const override;
    
    gint32 Deserialize(
        const CBuffer& oBuf_ ) override;
    
    guint32 GetMsgId() const override
    { return m_dwMsgId; }
    
    const std::string&
        GetMsgName() const override
    { return m_strMsgId; }
    
    TimeSpec& operator=(
        const TimeSpec& rhs );
};

struct FileStat
    : public CStructBase
{
    typedef CStructBase super;
    
    //Message identity
    guint32 m_dwMsgId = clsid( FileStat );
    std::string m_strMsgId = "appmon::FileStat";
    // data members
    guint32 st_dev = 0;
    guint32 st_ino = 0;
    guint32 st_mode = 0;
    guint32 st_nlink = 0;
    guint32 st_uid = 0;
    guint32 st_gid = 0;
    guint32 st_rdev = 0;
    guint32 st_size = 0;
    guint32 st_blksize = 0;
    guint32 st_blocks = 0;
    TimeSpec st_atim;
    TimeSpec st_mtim;
    TimeSpec st_ctim;
    std::string st_name = "";
    
    // Constructor
    FileStat() : super()
    { SetClassId( ( EnumClsid )m_dwMsgId ); }

    // methods
    gint32 Serialize(
        BufPtr& pBuf_ ) override;
    
    gint32 Deserialize(
        BufPtr& pBuf_ ) override;
    
    gint32 Serialize(
        CBuffer& oBuf_ ) const override;
    
    gint32 Deserialize(
        const CBuffer& oBuf_ ) override;
    
    guint32 GetMsgId() const override
    { return m_dwMsgId; }
    
    const std::string&
        GetMsgName() const override
    { return m_strMsgId; }
    
    FileStat& operator=(
        const FileStat& rhs );
};

class IIRegFsRemote_PImpl
    : public virtual CFastRpcSkelProxyBase
{
    public:
    typedef CFastRpcSkelProxyBase super;
    IIRegFsRemote_PImpl( const IConfigDb* pCfg ) :
        super( pCfg )
        {}
    gint32 InitUserFuncs();
    
    const EnumClsid GetIid() const override
    { return iid( IRegFsRemote ); }

    //RPC Sync Req Sender
    gint32 CreateFile(
        const std::string& strPath,
        guint32 dwMode,
        guint32 dwFlags,
        guint64& hFile );
    
    gint32 CreateFileDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 MakeDir(
        const std::string& strPath,
        guint32 dwMode );
    
    gint32 MakeDirDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 OpenFile(
        const std::string& strPath,
        guint32 dwFlags,
        guint64& hFile );
    
    gint32 OpenFileDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 CloseFile(
        guint64 hFile );
    
    gint32 CloseFileDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 RemoveFile(
        const std::string& strPath );
    
    gint32 RemoveFileDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 ReadFile(
        guint64 hFile,
        guint32 dwSize,
        guint32 dwOff,
        BufPtr& buffer );
    
    gint32 ReadFileDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 WriteFile(
        guint64 hFile,
        BufPtr& buffer,
        guint32 dwOff,
        guint32& dwSizeWrite );
    
    gint32 WriteFileDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 Truncate(
        guint64 hFile,
        guint32 dwOff );
    
    gint32 TruncateDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 CloseDir(
        guint64 hFile );
    
    gint32 CloseDirDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 RemoveDir(
        const std::string& strPath );
    
    gint32 RemoveDirDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 SetGid(
        const std::string& strPath,
        guint32 wGid );
    
    gint32 SetGidDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 SetUid(
        const std::string& strPath,
        guint32 wUid );
    
    gint32 SetUidDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 GetGid(
        const std::string& strPath,
        guint32& gid );
    
    gint32 GetGidDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 GetUid(
        const std::string& strPath,
        guint32& uid );
    
    gint32 GetUidDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 SymLink(
        const std::string& strSrcPath,
        const std::string& strDestPath );
    
    gint32 SymLinkDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 GetValue(
        const std::string& strPath,
        std::string& strJson );
    
    gint32 GetValueDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 SetValue(
        const std::string& strPath,
        const std::string& strJson );
    
    gint32 SetValueDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 Chmod(
        const std::string& strPath,
        guint32 dwMode );
    
    gint32 ChmodDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 Chown(
        const std::string& strPath,
        guint32 dwUid,
        guint32 dwGid );
    
    gint32 ChownDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 ReadLink(
        const std::string& strPath,
        BufPtr& buf );
    
    gint32 ReadLinkDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 Rename(
        const std::string& szFrom,
        const std::string& szTo );
    
    gint32 RenameDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 Flush(
        guint32 dwFlags );
    
    gint32 FlushDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 Access(
        const std::string& strPath,
        guint32 dwFlags );
    
    gint32 AccessDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 GetAttr(
        const std::string& strPath,
        FileStat& oStat );
    
    gint32 GetAttrDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 ReadDir(
        guint64 hDir,
        std::vector<FileStat>& vecDirEnt );
    
    gint32 ReadDirDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 OpenDir(
        const std::string& strPath,
        guint32 dwFlags,
        guint64& hDir );
    
    gint32 OpenDirDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 ExecBat(
        const std::string& strJson );
    
    gint32 ExecBatDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
};

class IIRegFsRemote_CliApi
    : public virtual CAggInterfaceProxy
{
    public:
    typedef CAggInterfaceProxy super;
    IIRegFsRemote_CliApi( const IConfigDb* pCfg ) :
        super( pCfg )
        {}
    //RPC Sync Req Sender
    gint32 CreateFile(
        const std::string& strPath,
        guint32 dwMode,
        guint32 dwFlags,
        guint64& hFile )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->CreateFile(
            strPath,
            dwMode,
            dwFlags,
            hFile );
    }
    //RPC Sync Req Sender
    gint32 MakeDir(
        const std::string& strPath,
        guint32 dwMode )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->MakeDir(
            strPath,
            dwMode );
    }
    //RPC Sync Req Sender
    gint32 OpenFile(
        const std::string& strPath,
        guint32 dwFlags,
        guint64& hFile )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->OpenFile(
            strPath,
            dwFlags,
            hFile );
    }
    //RPC Sync Req Sender
    gint32 CloseFile(
        guint64 hFile )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->CloseFile(
            hFile );
    }
    //RPC Sync Req Sender
    gint32 RemoveFile(
        const std::string& strPath )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->RemoveFile(
            strPath );
    }
    //RPC Sync Req Sender
    gint32 ReadFile(
        guint64 hFile,
        guint32 dwSize,
        guint32 dwOff,
        BufPtr& buffer )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->ReadFile(
            hFile,
            dwSize,
            dwOff,
            buffer );
    }
    //RPC Sync Req Sender
    gint32 WriteFile(
        guint64 hFile,
        BufPtr& buffer,
        guint32 dwOff,
        guint32& dwSizeWrite )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->WriteFile(
            hFile,
            buffer,
            dwOff,
            dwSizeWrite );
    }
    //RPC Sync Req Sender
    gint32 Truncate(
        guint64 hFile,
        guint32 dwOff )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->Truncate(
            hFile,
            dwOff );
    }
    //RPC Sync Req Sender
    gint32 CloseDir(
        guint64 hFile )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->CloseDir(
            hFile );
    }
    //RPC Sync Req Sender
    gint32 RemoveDir(
        const std::string& strPath )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->RemoveDir(
            strPath );
    }
    //RPC Sync Req Sender
    gint32 SetGid(
        const std::string& strPath,
        guint32 wGid )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->SetGid(
            strPath,
            wGid );
    }
    //RPC Sync Req Sender
    gint32 SetUid(
        const std::string& strPath,
        guint32 wUid )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->SetUid(
            strPath,
            wUid );
    }
    //RPC Sync Req Sender
    gint32 GetGid(
        const std::string& strPath,
        guint32& gid )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->GetGid(
            strPath,
            gid );
    }
    //RPC Sync Req Sender
    gint32 GetUid(
        const std::string& strPath,
        guint32& uid )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->GetUid(
            strPath,
            uid );
    }
    //RPC Sync Req Sender
    gint32 SymLink(
        const std::string& strSrcPath,
        const std::string& strDestPath )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->SymLink(
            strSrcPath,
            strDestPath );
    }
    //RPC Sync Req Sender
    gint32 GetValue(
        const std::string& strPath,
        std::string& strJson )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->GetValue(
            strPath,
            strJson );
    }
    //RPC Sync Req Sender
    gint32 SetValue(
        const std::string& strPath,
        const std::string& strJson )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->SetValue(
            strPath,
            strJson );
    }
    //RPC Sync Req Sender
    gint32 Chmod(
        const std::string& strPath,
        guint32 dwMode )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->Chmod(
            strPath,
            dwMode );
    }
    //RPC Sync Req Sender
    gint32 Chown(
        const std::string& strPath,
        guint32 dwUid,
        guint32 dwGid )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->Chown(
            strPath,
            dwUid,
            dwGid );
    }
    //RPC Sync Req Sender
    gint32 ReadLink(
        const std::string& strPath,
        BufPtr& buf )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->ReadLink(
            strPath,
            buf );
    }
    //RPC Sync Req Sender
    gint32 Rename(
        const std::string& szFrom,
        const std::string& szTo )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->Rename(
            szFrom,
            szTo );
    }
    //RPC Sync Req Sender
    gint32 Flush(
        guint32 dwFlags )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->Flush(
            dwFlags );
    }
    //RPC Sync Req Sender
    gint32 Access(
        const std::string& strPath,
        guint32 dwFlags )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->Access(
            strPath,
            dwFlags );
    }
    //RPC Sync Req Sender
    gint32 GetAttr(
        const std::string& strPath,
        FileStat& oStat )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->GetAttr(
            strPath,
            oStat );
    }
    //RPC Sync Req Sender
    gint32 ReadDir(
        guint64 hDir,
        std::vector<FileStat>& vecDirEnt )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->ReadDir(
            hDir,
            vecDirEnt );
    }
    //RPC Sync Req Sender
    gint32 OpenDir(
        const std::string& strPath,
        guint32 dwFlags,
        guint64& hDir )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->OpenDir(
            strPath,
            dwFlags,
            hDir );
    }
    //RPC Sync Req Sender
    gint32 ExecBat(
        const std::string& strJson )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->ExecBat(
            strJson );
    }
    inline IIRegFsRemote_PImpl* GetSkelPtr()
    {
        auto pCli = dynamic_cast< CFastRpcProxyBase* >( this );
        if( pCli == nullptr )
            return nullptr;
        InterfPtr pIf = pCli->GetStmSkel();
        if( pIf.IsEmpty() )
            return nullptr;
        auto pSkel = dynamic_cast<IIRegFsRemote_PImpl*>(( CRpcServices* )pIf );
        return pSkel;
    }
};

class IIRegFsRemote_SImpl
    : public virtual CFastRpcSkelSvrBase
{
    public:
    typedef CFastRpcSkelSvrBase super;
    IIRegFsRemote_SImpl( const IConfigDb* pCfg ) :
        super( pCfg )
        {}
    gint32 InitUserFuncs();
    
    const EnumClsid GetIid() const override
    { return iid( IRegFsRemote ); }

    //RPC Sync Req Handler Wrapper
    gint32 CreateFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 CreateFile(
        const std::string& strPath,
        guint32 dwMode,
        guint32 dwFlags,
        guint64& hFile );
    
    //RPC Sync Req Handler Wrapper
    gint32 MakeDirWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 MakeDir(
        const std::string& strPath,
        guint32 dwMode );
    
    //RPC Sync Req Handler Wrapper
    gint32 OpenFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 OpenFile(
        const std::string& strPath,
        guint32 dwFlags,
        guint64& hFile );
    
    //RPC Sync Req Handler Wrapper
    gint32 CloseFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 CloseFile(
        guint64 hFile );
    
    //RPC Sync Req Handler Wrapper
    gint32 RemoveFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 RemoveFile(
        const std::string& strPath );
    
    //RPC Sync Req Handler Wrapper
    gint32 ReadFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 ReadFile(
        guint64 hFile,
        guint32 dwSize,
        guint32 dwOff,
        BufPtr& buffer );
    
    //RPC Sync Req Handler Wrapper
    gint32 WriteFileWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 WriteFile(
        guint64 hFile,
        BufPtr& buffer,
        guint32 dwOff,
        guint32& dwSizeWrite );
    
    //RPC Sync Req Handler Wrapper
    gint32 TruncateWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 Truncate(
        guint64 hFile,
        guint32 dwOff );
    
    //RPC Sync Req Handler Wrapper
    gint32 CloseDirWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 CloseDir(
        guint64 hFile );
    
    //RPC Sync Req Handler Wrapper
    gint32 RemoveDirWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 RemoveDir(
        const std::string& strPath );
    
    //RPC Sync Req Handler Wrapper
    gint32 SetGidWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 SetGid(
        const std::string& strPath,
        guint32 wGid );
    
    //RPC Sync Req Handler Wrapper
    gint32 SetUidWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 SetUid(
        const std::string& strPath,
        guint32 wUid );
    
    //RPC Sync Req Handler Wrapper
    gint32 GetGidWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 GetGid(
        const std::string& strPath,
        guint32& gid );
    
    //RPC Sync Req Handler Wrapper
    gint32 GetUidWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 GetUid(
        const std::string& strPath,
        guint32& uid );
    
    //RPC Sync Req Handler Wrapper
    gint32 SymLinkWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 SymLink(
        const std::string& strSrcPath,
        const std::string& strDestPath );
    
    //RPC Sync Req Handler Wrapper
    gint32 GetValueWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 GetValue(
        const std::string& strPath,
        std::string& strJson );
    
    //RPC Sync Req Handler Wrapper
    gint32 SetValueWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 SetValue(
        const std::string& strPath,
        const std::string& strJson );
    
    //RPC Sync Req Handler Wrapper
    gint32 ChmodWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 Chmod(
        const std::string& strPath,
        guint32 dwMode );
    
    //RPC Sync Req Handler Wrapper
    gint32 ChownWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 Chown(
        const std::string& strPath,
        guint32 dwUid,
        guint32 dwGid );
    
    //RPC Sync Req Handler Wrapper
    gint32 ReadLinkWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 ReadLink(
        const std::string& strPath,
        BufPtr& buf );
    
    //RPC Sync Req Handler Wrapper
    gint32 RenameWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 Rename(
        const std::string& szFrom,
        const std::string& szTo );
    
    //RPC Sync Req Handler Wrapper
    gint32 FlushWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 Flush(
        guint32 dwFlags );
    
    //RPC Sync Req Handler Wrapper
    gint32 AccessWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 Access(
        const std::string& strPath,
        guint32 dwFlags );
    
    //RPC Sync Req Handler Wrapper
    gint32 GetAttrWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 GetAttr(
        const std::string& strPath,
        FileStat& oStat );
    
    //RPC Sync Req Handler Wrapper
    gint32 ReadDirWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 ReadDir(
        guint64 hDir,
        std::vector<FileStat>& vecDirEnt );
    
    //RPC Sync Req Handler Wrapper
    gint32 OpenDirWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 OpenDir(
        const std::string& strPath,
        guint32 dwFlags,
        guint64& hDir );
    
    //RPC Sync Req Handler Wrapper
    gint32 ExecBatWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC Sync Req Handler
    gint32 ExecBat(
        const std::string& strJson );
    
};

class IIRegFsRemote_SvrApi
    : public virtual CAggInterfaceServer
{
    public:
    typedef CAggInterfaceServer super;
    IIRegFsRemote_SvrApi( const IConfigDb* pCfg ) :
        super( pCfg )
        {}
    //RPC Sync Req Handler
    virtual gint32 CreateFile(
        const std::string& strPath,
        guint32 dwMode,
        guint32 dwFlags,
        guint64& hFile ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 MakeDir(
        const std::string& strPath,
        guint32 dwMode ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 OpenFile(
        const std::string& strPath,
        guint32 dwFlags,
        guint64& hFile ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 CloseFile(
        guint64 hFile ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 RemoveFile(
        const std::string& strPath ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 ReadFile(
        guint64 hFile,
        guint32 dwSize,
        guint32 dwOff,
        BufPtr& buffer ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 WriteFile(
        guint64 hFile,
        BufPtr& buffer,
        guint32 dwOff,
        guint32& dwSizeWrite ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 Truncate(
        guint64 hFile,
        guint32 dwOff ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 CloseDir(
        guint64 hFile ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 RemoveDir(
        const std::string& strPath ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 SetGid(
        const std::string& strPath,
        guint32 wGid ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 SetUid(
        const std::string& strPath,
        guint32 wUid ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 GetGid(
        const std::string& strPath,
        guint32& gid ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 GetUid(
        const std::string& strPath,
        guint32& uid ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 SymLink(
        const std::string& strSrcPath,
        const std::string& strDestPath ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 GetValue(
        const std::string& strPath,
        std::string& strJson ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 SetValue(
        const std::string& strPath,
        const std::string& strJson ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 Chmod(
        const std::string& strPath,
        guint32 dwMode ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 Chown(
        const std::string& strPath,
        guint32 dwUid,
        guint32 dwGid ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 ReadLink(
        const std::string& strPath,
        BufPtr& buf ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 Rename(
        const std::string& szFrom,
        const std::string& szTo ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 Flush(
        guint32 dwFlags ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 Access(
        const std::string& strPath,
        guint32 dwFlags ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 GetAttr(
        const std::string& strPath,
        FileStat& oStat ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 ReadDir(
        guint64 hDir,
        std::vector<FileStat>& vecDirEnt ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 OpenDir(
        const std::string& strPath,
        guint32 dwFlags,
        guint64& hDir ) = 0;
    
    //RPC Sync Req Handler
    virtual gint32 ExecBat(
        const std::string& strJson ) = 0;
    
    inline IIRegFsRemote_SImpl* GetSkelPtr( HANDLE hstm )
    {
        auto pSvr = dynamic_cast< CFastRpcServerBase* >( this );
        if( pSvr == nullptr )
            return nullptr;
        InterfPtr pIf;
        gint32 ret = pSvr->GetStmSkel(
            hstm, pIf );
        if( ERROR( ret ) )
            return nullptr;
        auto pSkel = dynamic_cast<IIRegFsRemote_SImpl*>(( CRpcServices* )pIf );
        return pSkel;
    }
};

struct KeyValue
    : public CStructBase
{
    typedef CStructBase super;
    
    //Message identity
    guint32 m_dwMsgId = clsid( KeyValue );
    std::string m_strMsgId = "appmon::KeyValue";
    // data members
    std::string strKey;
    Variant oValue;
    
    // Constructor
    KeyValue() : super()
    { SetClassId( ( EnumClsid )m_dwMsgId ); }

    // methods
    gint32 Serialize(
        BufPtr& pBuf_ ) override;
    
    gint32 Deserialize(
        BufPtr& pBuf_ ) override;
    
    gint32 Serialize(
        CBuffer& oBuf_ ) const override;
    
    gint32 Deserialize(
        const CBuffer& oBuf_ ) override;
    
    guint32 GetMsgId() const override
    { return m_dwMsgId; }
    
    const std::string&
        GetMsgName() const override
    { return m_strMsgId; }
    
    KeyValue& operator=(
        const KeyValue& rhs );
};

class IIAppMonitor_PImpl
    : public virtual CFastRpcSkelProxyBase
{
    public:
    typedef CFastRpcSkelProxyBase super;
    IIAppMonitor_PImpl( const IConfigDb* pCfg ) :
        super( pCfg )
        {}
    gint32 InitUserFuncs();
    
    const EnumClsid GetIid() const override
    { return iid( IAppMonitor ); }

    //RPC Async Req Sender
    gint32 RegisterListener( 
        IConfigDb* context, 
        HANDLE hStream_h,
        std::vector<std::string>& arrApps );

    gint32 RegisterListenerDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //Async callback wrapper
    gint32 RegisterListenerCbWrapper( 
        IEventSink* pCallback, 
        IEventSink* pIoReq,
        IConfigDb* pReqCtx );
    
    //RPC Async Req Callback
    //TODO: implement me by adding
    //response processing code
    gint32 RegisterListenerCallback(
        IConfigDb* context, 
        gint32 iRet );
    
    //RPC Async Req Sender
    gint32 RemoveListener( 
        IConfigDb* context, 
        HANDLE hStream_h );

    gint32 RemoveListenerDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //Async callback wrapper
    gint32 RemoveListenerCbWrapper( 
        IEventSink* pCallback, 
        IEventSink* pIoReq,
        IConfigDb* pReqCtx );
    
    //RPC Async Req Callback
    //TODO: implement me by adding
    //response processing code
    gint32 RemoveListenerCallback(
        IConfigDb* context, 
        gint32 iRet );
    
    //RPC Sync Req Sender
    gint32 ListApps(
        std::vector<std::string>& arrApps );
    
    //RPC Sync Req Sender
    gint32 ListPoints(
        const std::string& strAppPath,
        std::vector<std::string>& arrPoints );
    
    gint32 ListPointsDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 ListAttributes(
        const std::string& strPtPath,
        std::vector<std::string>& arrAttributes );
    
    gint32 ListAttributesDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 SetPointValue(
        const std::string& strPtPath,
        const Variant& value );
    
    gint32 SetPointValueDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 GetPointValue(
        const std::string& strPtPath,
        Variant& rvalue );
    
    gint32 GetPointValueDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 SetAttrValue(
        const std::string& strAttrPath,
        const Variant& value );
    
    gint32 SetAttrValueDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 GetAttrValue(
        const std::string& strAttrPath,
        Variant& rvalue );
    
    gint32 GetAttrValueDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 SetPointValues(
        std::vector<KeyValue>& arrValues );
    
    gint32 SetPointValuesDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC Sync Req Sender
    gint32 GetPointValues(
        std::vector<std::string>& arrPtPaths,
        std::vector<KeyValue>& arrKeyVals );
    
    gint32 GetPointValuesDummy( BufPtr& pBuf_ )
    { return STATUS_SUCCESS; }
    
    //RPC event handler 'OnPointChanged'
    gint32 OnPointChanged(
        const std::string& strPtPath,
        const Variant& value );
    
    //RPC event handler wrapper
    gint32 OnPointChangedWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    //RPC event handler 'OnPointsChanged'
    gint32 OnPointsChanged(
        std::vector<KeyValue>& arrKVs );
    
    //RPC event handler wrapper
    gint32 OnPointsChangedWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
};

class IIAppMonitor_CliApi
    : public CStreamProxyWrapper
{
    public:
    typedef CStreamProxyWrapper super;
    IIAppMonitor_CliApi( const IConfigDb* pCfg ) :
        super::super( pCfg ), super( pCfg )
        {}
    //RPC Async Req Sender
    gint32 RegisterListener( 
        IConfigDb* context, 
        HANDLE hStream_h,
        std::vector<std::string>& arrApps )
    {
        auto pIf = GetSkelPtr();
        if( pIf == nullptr )
            return -EFAULT;
        CRpcServices* pSvc = pIf;
        auto pSkel = dynamic_cast< IIAppMonitor_PImpl* >( pSvc );
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->RegisterListener(
            context,
            hStream_h,
            arrApps );
    }
    // RPC Async Req Callback
    virtual gint32 RegisterListenerCallback(
        IConfigDb* context, 
        gint32 iRet ) = 0;
    
    //RPC Async Req Sender
    gint32 RemoveListener( 
        IConfigDb* context, 
        HANDLE hStream_h )
    {
        auto pIf = GetSkelPtr();
        if( pIf == nullptr )
            return -EFAULT;
        CRpcServices* pSvc = pIf;
        auto pSkel = dynamic_cast< IIAppMonitor_PImpl* >( pSvc );
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->RemoveListener(
            context,
            hStream_h );
    }
    // RPC Async Req Callback
    virtual gint32 RemoveListenerCallback(
        IConfigDb* context, 
        gint32 iRet ) = 0;
    
    //RPC Sync Req Sender
    gint32 ListApps(
        std::vector<std::string>& arrApps )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->ListApps(
            arrApps );
    }
    //RPC Sync Req Sender
    gint32 ListPoints(
        const std::string& strAppPath,
        std::vector<std::string>& arrPoints )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->ListPoints(
            strAppPath,
            arrPoints );
    }
    //RPC Sync Req Sender
    gint32 ListAttributes(
        const std::string& strPtPath,
        std::vector<std::string>& arrAttributes )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->ListAttributes(
            strPtPath,
            arrAttributes );
    }
    //RPC Sync Req Sender
    gint32 SetPointValue(
        const std::string& strPtPath,
        const Variant& value )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->SetPointValue(
            strPtPath,
            value );
    }
    //RPC Sync Req Sender
    gint32 GetPointValue(
        const std::string& strPtPath,
        Variant& rvalue )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->GetPointValue(
            strPtPath,
            rvalue );
    }
    //RPC Sync Req Sender
    gint32 SetAttrValue(
        const std::string& strAttrPath,
        const Variant& value )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->SetAttrValue(
            strAttrPath,
            value );
    }
    //RPC Sync Req Sender
    gint32 GetAttrValue(
        const std::string& strAttrPath,
        Variant& rvalue )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->GetAttrValue(
            strAttrPath,
            rvalue );
    }
    //RPC Sync Req Sender
    gint32 SetPointValues(
        std::vector<KeyValue>& arrValues )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->SetPointValues(
            arrValues );
    }
    //RPC Sync Req Sender
    gint32 GetPointValues(
        std::vector<std::string>& arrPtPaths,
        std::vector<KeyValue>& arrKeyVals )
    {
        auto pSkel = GetSkelPtr(); 
        if( pSkel == nullptr )
            return -EFAULT;
        return pSkel->GetPointValues(
            arrPtPaths,
            arrKeyVals );
    }
    //RPC event handler 'OnPointChanged'
    virtual gint32 OnPointChanged(
        const std::string& strPtPath,
        const Variant& value ) = 0;
    
    //RPC event handler 'OnPointsChanged'
    virtual gint32 OnPointsChanged(
        std::vector<KeyValue>& arrKVs ) = 0;
    
    inline IIAppMonitor_PImpl* GetSkelPtr()
    {
        auto pCli = dynamic_cast< CFastRpcProxyBase* >( this );
        if( pCli == nullptr )
            return nullptr;
        InterfPtr pIf = pCli->GetStmSkel();
        if( pIf.IsEmpty() )
            return nullptr;
        auto pSkel = dynamic_cast<IIAppMonitor_PImpl*>(( CRpcServices* )pIf );
        return pSkel;
    }
};

class IIAppMonitor_SImpl
    : public virtual CFastRpcSkelSvrBase
{
    public:
    typedef CFastRpcSkelSvrBase super;
    IIAppMonitor_SImpl( const IConfigDb* pCfg ) :
        super( pCfg )
        {}
    gint32 InitUserFuncs();
    
    const EnumClsid GetIid() const override
    { return iid( IAppMonitor ); }

    //RPC Async Req Handler wrapper
    gint32 RegisterListenerWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    gint32 RegisterListenerCancelWrapper(
        IEventSink* pCallback,
        gint32 iRet,
        IConfigDb* pReqCtx_, BufPtr& pBuf_ );
    
    //RPC Async Req Cancel Handler
    gint32 OnRegisterListenerCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        HANDLE hStream_h,
        std::vector<std::string>& arrApps );
    //RPC Async Req Callback
    gint32 RegisterListenerComplete( 
        IConfigDb* pReqCtx_, gint32 iRet );
    
    //RPC Async Req Handler
    gint32 RegisterListener(
        IConfigDb* pReqCtx_,
        HANDLE hStream_h,
        std::vector<std::string>& arrApps );
    
    //RPC Async Req Handler wrapper
    gint32 RemoveListenerWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    gint32 RemoveListenerCancelWrapper(
        IEventSink* pCallback,
        gint32 iRet,
        IConfigDb* pReqCtx_, BufPtr& pBuf_ );
    
    //RPC Async Req Cancel Handler
    gint32 OnRemoveListenerCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        HANDLE hStream_h );
    //RPC Async Req Callback
    gint32 RemoveListenerComplete( 
        IConfigDb* pReqCtx_, gint32 iRet );
    
    //RPC Async Req Handler
    gint32 RemoveListener(
        IConfigDb* pReqCtx_,
        HANDLE hStream_h );
    
    //RPC Async Req Handler wrapper
    gint32 ListAppsWrapper(
        IEventSink* pCallback );
    
    gint32 ListAppsCancelWrapper(
        IEventSink* pCallback,
        gint32 iRet,
        IConfigDb* pReqCtx_ );
    
    //RPC Async Req Cancel Handler
    gint32 OnListAppsCanceled(
        IConfigDb* pReqCtx_, gint32 iRet );
    //RPC Async Req Callback
    gint32 ListAppsComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<std::string>& arrApps );
    
    //RPC Async Req Handler
    gint32 ListApps(
        IConfigDb* pReqCtx_,
        std::vector<std::string>& arrApps );
    
    //RPC Async Req Handler wrapper
    gint32 ListPointsWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    gint32 ListPointsCancelWrapper(
        IEventSink* pCallback,
        gint32 iRet,
        IConfigDb* pReqCtx_, BufPtr& pBuf_ );
    
    //RPC Async Req Cancel Handler
    gint32 OnListPointsCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strAppPath );
    //RPC Async Req Callback
    gint32 ListPointsComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<std::string>& arrPoints );
    
    //RPC Async Req Handler
    gint32 ListPoints(
        IConfigDb* pReqCtx_,
        const std::string& strAppPath,
        std::vector<std::string>& arrPoints );
    
    //RPC Async Req Handler wrapper
    gint32 ListAttributesWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    gint32 ListAttributesCancelWrapper(
        IEventSink* pCallback,
        gint32 iRet,
        IConfigDb* pReqCtx_, BufPtr& pBuf_ );
    
    //RPC Async Req Cancel Handler
    gint32 OnListAttributesCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPtPath );
    //RPC Async Req Callback
    gint32 ListAttributesComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<std::string>& arrAttributes );
    
    //RPC Async Req Handler
    gint32 ListAttributes(
        IConfigDb* pReqCtx_,
        const std::string& strPtPath,
        std::vector<std::string>& arrAttributes );
    
    //RPC Async Req Handler wrapper
    gint32 SetPointValueWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    gint32 SetPointValueCancelWrapper(
        IEventSink* pCallback,
        gint32 iRet,
        IConfigDb* pReqCtx_, BufPtr& pBuf_ );
    
    //RPC Async Req Cancel Handler
    gint32 OnSetPointValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPtPath,
        const Variant& value );
    //RPC Async Req Callback
    gint32 SetPointValueComplete( 
        IConfigDb* pReqCtx_, gint32 iRet );
    
    //RPC Async Req Handler
    gint32 SetPointValue(
        IConfigDb* pReqCtx_,
        const std::string& strPtPath,
        const Variant& value );
    
    //RPC Async Req Handler wrapper
    gint32 GetPointValueWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    gint32 GetPointValueCancelWrapper(
        IEventSink* pCallback,
        gint32 iRet,
        IConfigDb* pReqCtx_, BufPtr& pBuf_ );
    
    //RPC Async Req Cancel Handler
    gint32 OnGetPointValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPtPath );
    //RPC Async Req Callback
    gint32 GetPointValueComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        const Variant& rvalue );
    
    //RPC Async Req Handler
    gint32 GetPointValue(
        IConfigDb* pReqCtx_,
        const std::string& strPtPath,
        Variant& rvalue );
    
    //RPC Async Req Handler wrapper
    gint32 SetAttrValueWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    gint32 SetAttrValueCancelWrapper(
        IEventSink* pCallback,
        gint32 iRet,
        IConfigDb* pReqCtx_, BufPtr& pBuf_ );
    
    //RPC Async Req Cancel Handler
    gint32 OnSetAttrValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strAttrPath,
        const Variant& value );
    //RPC Async Req Callback
    gint32 SetAttrValueComplete( 
        IConfigDb* pReqCtx_, gint32 iRet );
    
    //RPC Async Req Handler
    gint32 SetAttrValue(
        IConfigDb* pReqCtx_,
        const std::string& strAttrPath,
        const Variant& value );
    
    //RPC Async Req Handler wrapper
    gint32 GetAttrValueWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    gint32 GetAttrValueCancelWrapper(
        IEventSink* pCallback,
        gint32 iRet,
        IConfigDb* pReqCtx_, BufPtr& pBuf_ );
    
    //RPC Async Req Cancel Handler
    gint32 OnGetAttrValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strAttrPath );
    //RPC Async Req Callback
    gint32 GetAttrValueComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        const Variant& rvalue );
    
    //RPC Async Req Handler
    gint32 GetAttrValue(
        IConfigDb* pReqCtx_,
        const std::string& strAttrPath,
        Variant& rvalue );
    
    //RPC Async Req Handler wrapper
    gint32 SetPointValuesWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    gint32 SetPointValuesCancelWrapper(
        IEventSink* pCallback,
        gint32 iRet,
        IConfigDb* pReqCtx_, BufPtr& pBuf_ );
    
    //RPC Async Req Cancel Handler
    gint32 OnSetPointValuesCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<KeyValue>& arrValues );
    //RPC Async Req Callback
    gint32 SetPointValuesComplete( 
        IConfigDb* pReqCtx_, gint32 iRet );
    
    //RPC Async Req Handler
    gint32 SetPointValues(
        IConfigDb* pReqCtx_,
        std::vector<KeyValue>& arrValues );
    
    //RPC Async Req Handler wrapper
    gint32 GetPointValuesWrapper(
        IEventSink* pCallback, BufPtr& pBuf_ );
    
    gint32 GetPointValuesCancelWrapper(
        IEventSink* pCallback,
        gint32 iRet,
        IConfigDb* pReqCtx_, BufPtr& pBuf_ );
    
    //RPC Async Req Cancel Handler
    gint32 OnGetPointValuesCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<std::string>& arrPtPaths );
    //RPC Async Req Callback
    gint32 GetPointValuesComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<KeyValue>& arrKeyVals );
    
    //RPC Async Req Handler
    gint32 GetPointValues(
        IConfigDb* pReqCtx_,
        std::vector<std::string>& arrPtPaths,
        std::vector<KeyValue>& arrKeyVals );
    
    //RPC event sender
    gint32 OnPointChanged(
        const std::string& strPtPath,
        const Variant& value );
    
    //RPC event sender
    gint32 OnPointsChanged(
        std::vector<KeyValue>& arrKVs );
    
};

class IIAppMonitor_SvrApi
    : public virtual CAggInterfaceServer
{
    public:
    typedef CAggInterfaceServer super;
    IIAppMonitor_SvrApi( const IConfigDb* pCfg ) :
        super( pCfg )
        {}
    //RPC Async Req Cancel Handler
    virtual gint32 OnRegisterListenerCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        HANDLE hStream_h,
        std::vector<std::string>& arrApps ) = 0;
    //RPC Async Req Complete helper
    //Call this method when you have
    //finished the async operation
    //with all the return value set
    //or an error code
    gint32 RegisterListenerComplete( 
        IConfigDb* pReqCtx_, gint32 iRet )
    {
        gint32 ret = 0;
        do{
            CCfgOpener oReqCtx( pReqCtx_ );
            IEventSink* pEvt = nullptr;
            ret = oReqCtx.GetPointer(
                propEventSink, pEvt );
            if( ERROR( ret ) )
                break;
            auto pSvr_ = dynamic_cast<CFastRpcServerBase*>( this );
            HANDLE hstm = INVALID_HANDLE;
            ret = pSvr_->GetStream( pEvt, hstm );
            if( ERROR( ret ) )
                break;
            auto pSkel = GetSkelPtr( hstm );
            pSkel->RegisterListenerComplete(
                pReqCtx_, iRet );
            
        }while( 0 );
        return ret;
    }
    //RPC Async Req Handler
    virtual gint32 RegisterListener(
        IConfigDb* pReqCtx_,
        HANDLE hStream_h,
        std::vector<std::string>& arrApps ) = 0;
    
    //RPC Async Req Cancel Handler
    virtual gint32 OnRemoveListenerCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        HANDLE hStream_h ) = 0;
    //RPC Async Req Complete helper
    //Call this method when you have
    //finished the async operation
    //with all the return value set
    //or an error code
    gint32 RemoveListenerComplete( 
        IConfigDb* pReqCtx_, gint32 iRet )
    {
        gint32 ret = 0;
        do{
            CCfgOpener oReqCtx( pReqCtx_ );
            IEventSink* pEvt = nullptr;
            ret = oReqCtx.GetPointer(
                propEventSink, pEvt );
            if( ERROR( ret ) )
                break;
            auto pSvr_ = dynamic_cast<CFastRpcServerBase*>( this );
            HANDLE hstm = INVALID_HANDLE;
            ret = pSvr_->GetStream( pEvt, hstm );
            if( ERROR( ret ) )
                break;
            auto pSkel = GetSkelPtr( hstm );
            pSkel->RemoveListenerComplete(
                pReqCtx_, iRet );
            
        }while( 0 );
        return ret;
    }
    //RPC Async Req Handler
    virtual gint32 RemoveListener(
        IConfigDb* pReqCtx_,
        HANDLE hStream_h ) = 0;
    
    //RPC Async Req Cancel Handler
    virtual gint32 OnListAppsCanceled(
        IConfigDb* pReqCtx_, gint32 iRet ) = 0;
    //RPC Async Req Complete helper
    //Call this method when you have
    //finished the async operation
    //with all the return value set
    //or an error code
    gint32 ListAppsComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<std::string>& arrApps )
    {
        gint32 ret = 0;
        do{
            CCfgOpener oReqCtx( pReqCtx_ );
            IEventSink* pEvt = nullptr;
            ret = oReqCtx.GetPointer(
                propEventSink, pEvt );
            if( ERROR( ret ) )
                break;
            auto pSvr_ = dynamic_cast<CFastRpcServerBase*>( this );
            HANDLE hstm = INVALID_HANDLE;
            ret = pSvr_->GetStream( pEvt, hstm );
            if( ERROR( ret ) )
                break;
            auto pSkel = GetSkelPtr( hstm );
            pSkel->ListAppsComplete(
                pReqCtx_, iRet,
                arrApps );
        }while( 0 );
        return ret;
    }
    //RPC Async Req Handler
    virtual gint32 ListApps(
        IConfigDb* pReqCtx_,
        std::vector<std::string>& arrApps ) = 0;
    
    //RPC Async Req Cancel Handler
    virtual gint32 OnListPointsCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strAppPath ) = 0;
    //RPC Async Req Complete helper
    //Call this method when you have
    //finished the async operation
    //with all the return value set
    //or an error code
    gint32 ListPointsComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<std::string>& arrPoints )
    {
        gint32 ret = 0;
        do{
            CCfgOpener oReqCtx( pReqCtx_ );
            IEventSink* pEvt = nullptr;
            ret = oReqCtx.GetPointer(
                propEventSink, pEvt );
            if( ERROR( ret ) )
                break;
            auto pSvr_ = dynamic_cast<CFastRpcServerBase*>( this );
            HANDLE hstm = INVALID_HANDLE;
            ret = pSvr_->GetStream( pEvt, hstm );
            if( ERROR( ret ) )
                break;
            auto pSkel = GetSkelPtr( hstm );
            pSkel->ListPointsComplete(
                pReqCtx_, iRet,
                arrPoints );
        }while( 0 );
        return ret;
    }
    //RPC Async Req Handler
    virtual gint32 ListPoints(
        IConfigDb* pReqCtx_,
        const std::string& strAppPath,
        std::vector<std::string>& arrPoints ) = 0;
    
    //RPC Async Req Cancel Handler
    virtual gint32 OnListAttributesCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPtPath ) = 0;
    //RPC Async Req Complete helper
    //Call this method when you have
    //finished the async operation
    //with all the return value set
    //or an error code
    gint32 ListAttributesComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<std::string>& arrAttributes )
    {
        gint32 ret = 0;
        do{
            CCfgOpener oReqCtx( pReqCtx_ );
            IEventSink* pEvt = nullptr;
            ret = oReqCtx.GetPointer(
                propEventSink, pEvt );
            if( ERROR( ret ) )
                break;
            auto pSvr_ = dynamic_cast<CFastRpcServerBase*>( this );
            HANDLE hstm = INVALID_HANDLE;
            ret = pSvr_->GetStream( pEvt, hstm );
            if( ERROR( ret ) )
                break;
            auto pSkel = GetSkelPtr( hstm );
            pSkel->ListAttributesComplete(
                pReqCtx_, iRet,
                arrAttributes );
        }while( 0 );
        return ret;
    }
    //RPC Async Req Handler
    virtual gint32 ListAttributes(
        IConfigDb* pReqCtx_,
        const std::string& strPtPath,
        std::vector<std::string>& arrAttributes ) = 0;
    
    //RPC Async Req Cancel Handler
    virtual gint32 OnSetPointValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPtPath,
        const Variant& value ) = 0;
    //RPC Async Req Complete helper
    //Call this method when you have
    //finished the async operation
    //with all the return value set
    //or an error code
    gint32 SetPointValueComplete( 
        IConfigDb* pReqCtx_, gint32 iRet )
    {
        gint32 ret = 0;
        do{
            CCfgOpener oReqCtx( pReqCtx_ );
            IEventSink* pEvt = nullptr;
            ret = oReqCtx.GetPointer(
                propEventSink, pEvt );
            if( ERROR( ret ) )
                break;
            auto pSvr_ = dynamic_cast<CFastRpcServerBase*>( this );
            HANDLE hstm = INVALID_HANDLE;
            ret = pSvr_->GetStream( pEvt, hstm );
            if( ERROR( ret ) )
                break;
            auto pSkel = GetSkelPtr( hstm );
            pSkel->SetPointValueComplete(
                pReqCtx_, iRet );
            
        }while( 0 );
        return ret;
    }
    //RPC Async Req Handler
    virtual gint32 SetPointValue(
        IConfigDb* pReqCtx_,
        const std::string& strPtPath,
        const Variant& value ) = 0;
    
    //RPC Async Req Cancel Handler
    virtual gint32 OnGetPointValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPtPath ) = 0;
    //RPC Async Req Complete helper
    //Call this method when you have
    //finished the async operation
    //with all the return value set
    //or an error code
    gint32 GetPointValueComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        const Variant& rvalue )
    {
        gint32 ret = 0;
        do{
            CCfgOpener oReqCtx( pReqCtx_ );
            IEventSink* pEvt = nullptr;
            ret = oReqCtx.GetPointer(
                propEventSink, pEvt );
            if( ERROR( ret ) )
                break;
            auto pSvr_ = dynamic_cast<CFastRpcServerBase*>( this );
            HANDLE hstm = INVALID_HANDLE;
            ret = pSvr_->GetStream( pEvt, hstm );
            if( ERROR( ret ) )
                break;
            auto pSkel = GetSkelPtr( hstm );
            pSkel->GetPointValueComplete(
                pReqCtx_, iRet,
                rvalue );
        }while( 0 );
        return ret;
    }
    //RPC Async Req Handler
    virtual gint32 GetPointValue(
        IConfigDb* pReqCtx_,
        const std::string& strPtPath,
        Variant& rvalue ) = 0;
    
    //RPC Async Req Cancel Handler
    virtual gint32 OnSetAttrValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strAttrPath,
        const Variant& value ) = 0;
    //RPC Async Req Complete helper
    //Call this method when you have
    //finished the async operation
    //with all the return value set
    //or an error code
    gint32 SetAttrValueComplete( 
        IConfigDb* pReqCtx_, gint32 iRet )
    {
        gint32 ret = 0;
        do{
            CCfgOpener oReqCtx( pReqCtx_ );
            IEventSink* pEvt = nullptr;
            ret = oReqCtx.GetPointer(
                propEventSink, pEvt );
            if( ERROR( ret ) )
                break;
            auto pSvr_ = dynamic_cast<CFastRpcServerBase*>( this );
            HANDLE hstm = INVALID_HANDLE;
            ret = pSvr_->GetStream( pEvt, hstm );
            if( ERROR( ret ) )
                break;
            auto pSkel = GetSkelPtr( hstm );
            pSkel->SetAttrValueComplete(
                pReqCtx_, iRet );
            
        }while( 0 );
        return ret;
    }
    //RPC Async Req Handler
    virtual gint32 SetAttrValue(
        IConfigDb* pReqCtx_,
        const std::string& strAttrPath,
        const Variant& value ) = 0;
    
    //RPC Async Req Cancel Handler
    virtual gint32 OnGetAttrValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strAttrPath ) = 0;
    //RPC Async Req Complete helper
    //Call this method when you have
    //finished the async operation
    //with all the return value set
    //or an error code
    gint32 GetAttrValueComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        const Variant& rvalue )
    {
        gint32 ret = 0;
        do{
            CCfgOpener oReqCtx( pReqCtx_ );
            IEventSink* pEvt = nullptr;
            ret = oReqCtx.GetPointer(
                propEventSink, pEvt );
            if( ERROR( ret ) )
                break;
            auto pSvr_ = dynamic_cast<CFastRpcServerBase*>( this );
            HANDLE hstm = INVALID_HANDLE;
            ret = pSvr_->GetStream( pEvt, hstm );
            if( ERROR( ret ) )
                break;
            auto pSkel = GetSkelPtr( hstm );
            pSkel->GetAttrValueComplete(
                pReqCtx_, iRet,
                rvalue );
        }while( 0 );
        return ret;
    }
    //RPC Async Req Handler
    virtual gint32 GetAttrValue(
        IConfigDb* pReqCtx_,
        const std::string& strAttrPath,
        Variant& rvalue ) = 0;
    
    //RPC Async Req Cancel Handler
    virtual gint32 OnSetPointValuesCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<KeyValue>& arrValues ) = 0;
    //RPC Async Req Complete helper
    //Call this method when you have
    //finished the async operation
    //with all the return value set
    //or an error code
    gint32 SetPointValuesComplete( 
        IConfigDb* pReqCtx_, gint32 iRet )
    {
        gint32 ret = 0;
        do{
            CCfgOpener oReqCtx( pReqCtx_ );
            IEventSink* pEvt = nullptr;
            ret = oReqCtx.GetPointer(
                propEventSink, pEvt );
            if( ERROR( ret ) )
                break;
            auto pSvr_ = dynamic_cast<CFastRpcServerBase*>( this );
            HANDLE hstm = INVALID_HANDLE;
            ret = pSvr_->GetStream( pEvt, hstm );
            if( ERROR( ret ) )
                break;
            auto pSkel = GetSkelPtr( hstm );
            pSkel->SetPointValuesComplete(
                pReqCtx_, iRet );
            
        }while( 0 );
        return ret;
    }
    //RPC Async Req Handler
    virtual gint32 SetPointValues(
        IConfigDb* pReqCtx_,
        std::vector<KeyValue>& arrValues ) = 0;
    
    //RPC Async Req Cancel Handler
    virtual gint32 OnGetPointValuesCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<std::string>& arrPtPaths ) = 0;
    //RPC Async Req Complete helper
    //Call this method when you have
    //finished the async operation
    //with all the return value set
    //or an error code
    gint32 GetPointValuesComplete( 
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<KeyValue>& arrKeyVals )
    {
        gint32 ret = 0;
        do{
            CCfgOpener oReqCtx( pReqCtx_ );
            IEventSink* pEvt = nullptr;
            ret = oReqCtx.GetPointer(
                propEventSink, pEvt );
            if( ERROR( ret ) )
                break;
            auto pSvr_ = dynamic_cast<CFastRpcServerBase*>( this );
            HANDLE hstm = INVALID_HANDLE;
            ret = pSvr_->GetStream( pEvt, hstm );
            if( ERROR( ret ) )
                break;
            auto pSkel = GetSkelPtr( hstm );
            pSkel->GetPointValuesComplete(
                pReqCtx_, iRet,
                arrKeyVals );
        }while( 0 );
        return ret;
    }
    //RPC Async Req Handler
    virtual gint32 GetPointValues(
        IConfigDb* pReqCtx_,
        std::vector<std::string>& arrPtPaths,
        std::vector<KeyValue>& arrKeyVals ) = 0;
    
    //RPC event sender
    virtual gint32 OnPointChanged(
        const std::string& strPtPath,
        const Variant& value ) = 0;
    
    //RPC event sender
    virtual gint32 OnPointsChanged(
        std::vector<KeyValue>& arrKVs ) = 0;
    
    inline IIAppMonitor_SImpl* GetSkelPtr( HANDLE hstm )
    {
        auto pSvr = dynamic_cast< CFastRpcServerBase* >( this );
        if( pSvr == nullptr )
            return nullptr;
        InterfPtr pIf;
        gint32 ret = pSvr->GetStmSkel(
            hstm, pIf );
        if( ERROR( ret ) )
            return nullptr;
        auto pSkel = dynamic_cast<IIAppMonitor_SImpl*>(( CRpcServices* )pIf );
        return pSkel;
    }
};

DECLARE_AGGREGATED_SKEL_PROXY(
    CAppMonitor_CliSkel,
    CStatCountersProxySkel,
    IIRegFsRemote_PImpl,
    IIAppMonitor_PImpl );

#define Clsid_CAppMonitor_SvrSkel_Base Clsid_Invalid

DECLARE_AGGREGATED_SKEL_SERVER(
    CAppMonitor_SvrSkel_Base,
    CStatCountersServerSkel,
    IIRegFsRemote_SImpl,
    IIAppMonitor_SImpl );

class CAppMonitor_SvrSkel :
    public CAppMonitor_SvrSkel_Base
{
    public:
    typedef CAppMonitor_SvrSkel_Base super;
    CAppMonitor_SvrSkel( const IConfigDb* pCfg ):
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid( CAppMonitor_SvrSkel ) ); }

    gint32 InvokeUserMethod(
        IConfigDb* pParams,
        IEventSink* pCallback ) override
    {
        CRpcServices* pSvc = nullptr;
        if( !IsRfcEnabled() )
        {
            if( m_pQpsTask.IsEmpty() )
                pSvc = this->GetStreamIf();
            else
                pSvc = this;
            gint32 ret = pSvc->AllocReqToken();
            if( ERROR( ret ) )
                return ret;
        }
        return super::InvokeUserMethod(
            pParams, pCallback );
    }
};

