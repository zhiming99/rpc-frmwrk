// Generated by ridlc
// ../../ridl/.libs/ridlc -sO . ./appmon.ridl 
// Your task is to implement the following classes
// to get your rpc server work
#pragma once
#include "appmon.h"
#include <unordered_set>

#define Clsid_CAppMonitor_SvrBase    Clsid_Invalid

struct CFlockHelper
{
    gint32 m_iFd = -1;
    public:
    CFlockHelper( gint32 iFd, bool bRead = true );
    ~CFlockHelper();
};

DECLARE_AGGREGATED_SERVER(
    CAppMonitor_SvrBase,
    CStatCounters_SvrBase,
    CStreamServerAsync,
    IIRegFsRemote_SvrApi,
    IIAppMonitor_SvrApi,
    CFastRpcServerBase );

class CAppMonitor_SvrImpl
    : public CAppMonitor_SvrBase
{
    public:
    typedef CAppMonitor_SvrBase super;
    CAppMonitor_SvrImpl( const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(CAppMonitor_SvrImpl ) ); }
    using UID2GIDS = std::hashmap< guint32, std::unordered_set< guint32 > >;
    UID2GIDS m_mapUid2Gids;

    /* The following 3 methods are important for */
    /* streaming transfer. rewrite them if necessary */
    gint32 OnStreamReady( HANDLE hChannel ) override
    { return super::OnStreamReady( hChannel ); } 
    
    gint32 OnStmClosing( HANDLE hChannel ) override
    { return super::OnStmClosing( hChannel ); }
    
    gint32 AcceptNewStream(
        IEventSink* pCb, IConfigDb* pDataDesc ) override
    { return STATUS_SUCCESS; }
    
    gint32 OnPostStart(
        IEventSink* pCallback ) override;

    gint32 OnPreStop(
        IEventSink* pCallback ) override
    {
        StopQpsTask();
        return super::OnPreStop( pCallback );
    }

    //RPC Async Req Cancel Handler
    gint32 OnCreateFileCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/,
        guint32 dwMode /*[ In ]*/,
        guint32 dwFlags /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'CreateFile' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 CreateFile(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        guint32 dwMode /*[ In ]*/,
        guint32 dwFlags /*[ In ]*/,
        guint64& hFile /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnMakeDirCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/,
        guint32 dwMode /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'MakeDir' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 MakeDir(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        guint32 dwMode /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnOpenFileCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/,
        guint32 dwFlags /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'OpenFile' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 OpenFile(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        guint32 dwFlags /*[ In ]*/,
        guint64& hFile /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnCloseFileCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        guint64 hFile /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'CloseFile' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 CloseFile(
        IConfigDb* pReqCtx_,
        guint64 hFile /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnRemoveFileCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'RemoveFile' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 RemoveFile(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnReadFileCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        guint64 hFile /*[ In ]*/,
        guint32 dwSize /*[ In ]*/,
        guint32 dwOff /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'ReadFile' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 ReadFile(
        IConfigDb* pReqCtx_,
        guint64 hFile /*[ In ]*/,
        guint32 dwSize /*[ In ]*/,
        guint32 dwOff /*[ In ]*/,
        BufPtr& buffer /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnWriteFileCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        guint64 hFile /*[ In ]*/,
        BufPtr& buffer /*[ In ]*/,
        guint32 dwOff /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'WriteFile' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 WriteFile(
        IConfigDb* pReqCtx_,
        guint64 hFile /*[ In ]*/,
        BufPtr& buffer /*[ In ]*/,
        guint32 dwOff /*[ In ]*/,
        guint32& dwSizeWrite /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnTruncateCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        guint64 hFile /*[ In ]*/,
        guint32 dwOff /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'Truncate' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 Truncate(
        IConfigDb* pReqCtx_,
        guint64 hFile /*[ In ]*/,
        guint32 dwOff /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnCloseDirCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        guint64 hFile /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'CloseDir' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 CloseDir(
        IConfigDb* pReqCtx_,
        guint64 hFile /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnRemoveDirCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'RemoveDir' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 RemoveDir(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnSetGidCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/,
        guint32 wGid /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'SetGid' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 SetGid(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        guint32 wGid /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnSetUidCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/,
        guint32 wUid /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'SetUid' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 SetUid(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        guint32 wUid /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnGetGidCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'GetGid' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 GetGid(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        guint32& gid /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnGetUidCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'GetUid' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 GetUid(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        guint32& uid /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnSymLinkCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strSrcPath /*[ In ]*/,
        const std::string& strDestPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'SymLink' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 SymLink(
        IConfigDb* pReqCtx_,
        const std::string& strSrcPath /*[ In ]*/,
        const std::string& strDestPath /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnGetValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'GetValue' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 GetValue(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        std::string& strJson /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnSetValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/,
        const std::string& strJson /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'SetValue' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 SetValue(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        const std::string& strJson /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnChmodCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/,
        guint32 dwMode /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'Chmod' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 Chmod(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        guint32 dwMode /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnChownCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/,
        guint32 dwUid /*[ In ]*/,
        guint32 dwGid /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'Chown' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 Chown(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        guint32 dwUid /*[ In ]*/,
        guint32 dwGid /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnReadLinkCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'ReadLink' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 ReadLink(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        BufPtr& buf /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnRenameCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& szFrom /*[ In ]*/,
        const std::string& szTo /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'Rename' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 Rename(
        IConfigDb* pReqCtx_,
        const std::string& szFrom /*[ In ]*/,
        const std::string& szTo /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnFlushCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        guint32 dwFlags /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'Flush' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 Flush(
        IConfigDb* pReqCtx_,
        guint32 dwFlags /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnAccessCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/,
        guint32 dwFlags /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'Access' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 Access(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        guint32 dwFlags /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnGetAttrCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'GetAttr' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 GetAttr(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        FileStat& oStat /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnReadDirCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        guint64 hDir /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'ReadDir' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 ReadDir(
        IConfigDb* pReqCtx_,
        guint64 hDir /*[ In ]*/,
        std::vector<FileStat>& vecDirEnt /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnOpenDirCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPath /*[ In ]*/,
        guint32 dwFlags /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'OpenDir' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 OpenDir(
        IConfigDb* pReqCtx_,
        const std::string& strPath /*[ In ]*/,
        guint32 dwFlags /*[ In ]*/,
        guint64& hDir /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnExecBatCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strJson /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'ExecBat' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 ExecBat(
        IConfigDb* pReqCtx_,
        const std::string& strJson /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnRegisterListenerCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        HANDLE hStream_h /*[ In ]*/,
        std::vector<std::string>& arrApps /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'RegisterListener' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 RegisterListener(
        IConfigDb* pReqCtx_,
        HANDLE hStream_h /*[ In ]*/,
        std::vector<std::string>& arrApps /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnRemoveListenerCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        HANDLE hStream_h /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'RemoveListener' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 RemoveListener(
        IConfigDb* pReqCtx_,
        HANDLE hStream_h /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnListAppsCanceled(
        IConfigDb* pReqCtx_, gint32 iRet ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'ListApps' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 ListApps(
        IConfigDb* pReqCtx_,
        std::vector<std::string>& arrApps /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnListPointsCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strAppPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'ListPoints' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 ListPoints(
        IConfigDb* pReqCtx_,
        const std::string& strAppPath /*[ In ]*/,
        std::vector<std::string>& arrPoints /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnListAttributesCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPtPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'ListAttributes' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 ListAttributes(
        IConfigDb* pReqCtx_,
        const std::string& strPtPath /*[ In ]*/,
        std::vector<std::string>& arrAttributes /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnSetPointValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPtPath /*[ In ]*/,
        const Variant& value /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'SetPointValue' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 SetPointValue(
        IConfigDb* pReqCtx_,
        const std::string& strPtPath /*[ In ]*/,
        const Variant& value /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnGetPointValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strPtPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'GetPointValue' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 GetPointValue(
        IConfigDb* pReqCtx_,
        const std::string& strPtPath /*[ In ]*/,
        Variant& rvalue /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnSetAttrValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strAttrPath /*[ In ]*/,
        const Variant& value /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'SetAttrValue' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 SetAttrValue(
        IConfigDb* pReqCtx_,
        const std::string& strAttrPath /*[ In ]*/,
        const Variant& value /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnGetAttrValueCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        const std::string& strAttrPath /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'GetAttrValue' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 GetAttrValue(
        IConfigDb* pReqCtx_,
        const std::string& strAttrPath /*[ In ]*/,
        Variant& rvalue /*[ Out ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnSetPointValuesCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<KeyValue>& arrValues /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'SetPointValues' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 SetPointValues(
        IConfigDb* pReqCtx_,
        std::vector<KeyValue>& arrValues /*[ In ]*/ ) override;
    //RPC Async Req Cancel Handler
    gint32 OnGetPointValuesCanceled(
        IConfigDb* pReqCtx_, gint32 iRet,
        std::vector<std::string>& arrPtPaths /*[ In ]*/ ) override
    {
        DebugPrintEx( logErr, iRet,
            "request 'GetPointValues' is canceled." );
        return STATUS_SUCCESS;
    }
    //RPC Async Req Handler
    gint32 GetPointValues(
        IConfigDb* pReqCtx_,
        std::vector<std::string>& arrPtPaths /*[ In ]*/,
        std::vector<KeyValue>& arrKeyVals /*[ Out ]*/ ) override;
    gint32 OnPointChanged(
        const std::string& strPtPath /*[ In ]*/,
        const Variant& value /*[ In ]*/ ) override;
    gint32 OnPointsChanged(
        std::vector<KeyValue>& arrKVs /*[ In ]*/ ) override;
    gint32 CreateStmSkel(
        HANDLE, guint32, InterfPtr& ) override;
    gint32 OnPreStart(
        IEventSink* pCallback ) override;
    gint32 LoadUserGrpsMap();
};

class CAppMonitor_ChannelSvr
    : public CRpcStreamChannelSvr
{
    public:
    typedef CRpcStreamChannelSvr super;
    CAppMonitor_ChannelSvr(
        const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(
        CAppMonitor_ChannelSvr ) ); }

    gint32 OnStreamReady( HANDLE hstm ) override;
};

