// GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
// Copyright (C) 2024  zhiming <woodhead99@gmail.com>
// This program can be distributed under the terms of the GNU GPLv3.
// ../../ridl/.libs/ridlc -sO . ./appmon.ridl 
#pragma once
#include "appmon.h"

#include "IAppStorecli.h"
#include "IAppMonitorcli.h"

DECLARE_AGGREGATED_SKEL_PROXY(
    CAppMonitor_CliSkel,
    CStatCountersProxySkel,
    IIAppStore_PImpl,
    IIAppMonitor_PImpl );

#define Clsid_CAppMonitor_CliBase    Clsid_Invalid

DECLARE_AGGREGATED_PROXY(
    CAppMonitor_CliBase,
    CStatCounters_CliBase,
    CStreamProxyAsync,
    IIAppStore_CliApi,
    IIAppMonitor_CliApi,
    CFastRpcProxyBase );

class CAppMonitor_CliImpl
    : public CAppMonitor_CliBase
{
    public:
    typedef CAppMonitor_CliBase super;
    CAppMonitor_CliImpl( const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(CAppMonitor_CliImpl ) ); }

    /* The following 2 methods are important for */
    /* streaming transfer. rewrite them if necessary */
    gint32 OnStreamReady( HANDLE hChannel ) override
    { return super::OnStreamReady( hChannel ); } 
    
    gint32 OnStmClosing( HANDLE hChannel ) override
    { return super::OnStmClosing( hChannel ); }
    
    //RPC event handler 'OnPointChanged'
    gint32 OnPointChanged(
        const std::string& strPtPath /*[ In ]*/,
        const Variant& value /*[ In ]*/ ) override;
    //RPC event handler 'OnPointsChanged'
    gint32 OnPointsChanged(
        std::vector<KeyValue>& arrKVs /*[ In ]*/ ) override;
    gint32 CreateStmSkel(
        InterfPtr& pIf ) override;
    
    gint32 OnPreStart(
        IEventSink* pCallback ) override;
};

class CAppMonitor_ChannelCli
    : public CRpcStreamChannelCli
{
    public:
    typedef CRpcStreamChannelCli super;
    CAppMonitor_ChannelCli(
        const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(
        CAppMonitor_ChannelCli ) ); }
};

