# GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
# Copyright (C) 2024  zhiming <woodhead99@gmail.com>
# This program can be distributed under the terms of the GNU GPLv3.
# ridlc -pO . -l regfs.ridl 
from rpcf.proxy import PyRpcServices
from seribase import CSerialBase
import errno

class CStructBase :
    def __init__( self, pIf : PyRpcServices = None ) :
        self.pIf = pIf
    def Serialize( self, buf : bytearray ) -> int:
        pass
    def Deserialize( self, buf : bytearray, offset : int ) -> ( int, int ):
        pass
    
class TimeSpec( CStructBase ) :
    
    #Message identity
    @classmethod
    def GetStructId( cls ) -> int:
        return 0x8FADC13F

    @classmethod
    def GetStructName( cls ) -> str:
        return "RegistryFs::TimeSpec"

    def __init__( self, pIf : PyRpcServices = None ) :
        super().__init__( pIf )
        self.tv_sec = 0
        self.tv_nsec = 0
        
    def Serialize( self, buf : bytearray ) -> int:
        
        osb = CSerialBase( self.pIf )
        
        osb.SerialInt32( buf, TimeSpec.GetStructId() )
        osb.SerialInt32( buf, self.tv_sec )
        osb.SerialInt32( buf, self.tv_nsec )
        
        return 0
        
    
    def Deserialize( self, buf : bytearray, offset : int ) -> ( int, int ):
        
        osb = CSerialBase( self.pIf )
        
        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        if ret[ 0 ] != TimeSpec.GetStructId() :
            return ( -errno.EBADMSG, 0 )
        offset = ret[ 1 ]
        
        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.tv_sec = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.tv_nsec = ret[ 0 ]
        offset = ret[ 1 ]

        return ( 0, offset )
        
    
class FileStat( CStructBase ) :
    
    #Message identity
    @classmethod
    def GetStructId( cls ) -> int:
        return 0x95968E4E

    @classmethod
    def GetStructName( cls ) -> str:
        return "RegistryFs::FileStat"

    def __init__( self, pIf : PyRpcServices = None ) :
        super().__init__( pIf )
        self.st_dev = 0
        self.st_ino = 0
        self.st_mode = 0
        self.st_nlink = 0
        self.st_uid = 0
        self.st_gid = 0
        self.st_rdev = 0
        self.st_size = 0
        self.st_blksize = 0
        self.st_blocks = 0
        self.st_atim = TimeSpec( self )
        self.st_mtim = TimeSpec( self )
        self.st_ctim = TimeSpec( self )
        self.st_name = ""
        
    def Serialize( self, buf : bytearray ) -> int:
        
        osb = CSerialBase( self.pIf )
        
        osb.SerialInt32( buf, FileStat.GetStructId() )
        osb.SerialInt32( buf, self.st_dev )
        osb.SerialInt32( buf, self.st_ino )
        osb.SerialInt32( buf, self.st_mode )
        osb.SerialInt32( buf, self.st_nlink )
        osb.SerialInt32( buf, self.st_uid )
        osb.SerialInt32( buf, self.st_gid )
        osb.SerialInt32( buf, self.st_rdev )
        osb.SerialInt32( buf, self.st_size )
        osb.SerialInt32( buf, self.st_blksize )
        osb.SerialInt32( buf, self.st_blocks )
        ret = osb.SerialStruct( buf, self.st_atim )
        if ret < 0 :
            return ret
        ret = osb.SerialStruct( buf, self.st_mtim )
        if ret < 0 :
            return ret
        ret = osb.SerialStruct( buf, self.st_ctim )
        if ret < 0 :
            return ret
        osb.SerialString( buf, self.st_name )
        
        return 0
        
    
    def Deserialize( self, buf : bytearray, offset : int ) -> ( int, int ):
        
        osb = CSerialBase( self.pIf )
        
        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        if ret[ 0 ] != FileStat.GetStructId() :
            return ( -errno.EBADMSG, 0 )
        offset = ret[ 1 ]
        
        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_dev = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_ino = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_mode = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_nlink = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_uid = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_gid = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_rdev = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_size = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_blksize = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialInt32( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_blocks = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialStruct( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_atim = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialStruct( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_mtim = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialStruct( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_ctim = ret[ 0 ]
        offset = ret[ 1 ]

        ret = osb.DeserialString( buf, offset )
        if ret[ 0 ] is None :
            return ( -errno.ENOENT, 0 )
        self.st_name = ret[ 0 ]
        offset = ret[ 1 ]

        return ( 0, offset )
        
    
from seribase import g_mapStructs
g_mapStructs[ 0x8FADC13F ] = TimeSpec
g_mapStructs[ 0x95968E4E ] = FileStat