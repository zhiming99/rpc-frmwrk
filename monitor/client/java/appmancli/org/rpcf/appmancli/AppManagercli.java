// GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
// Copyright (C) 2025  zhiming <woodhead99@gmail.com>
// This program can be distributed under the terms of the GNU GPLv3.
// /usr/local/bin/ridlc --sync_mode IAppStore=sync --sync_mode IDataProducer=sync --services=AppManager --client --pkgname=org.rpcf.appmancli -jlsO . ../../../../monitor/appmon/appmon.ridl 
package org.rpcf.appmancli;
import org.rpcf.rpcbase.*;
import java.util.HashMap;
import java.util.Map;

import java.lang.String;
import java.util.ArrayList;

public class AppManagercli extends AppManagerclibase
{
    public AppManagercli( ObjPtr pIoMgr,
        String strDesc, String strSvrObj )
    { super( pIoMgr, strDesc, strSvrObj ); }

    public String m_strAppInst;
    public JavaRpcServer m_oTarget;

    class Pair{
        public String strPtName;
        public int typeId;
        public Pair( String strVal, int intVal )
        {
            strPtName = strVal;
            typeId = intVal;
        }
        public Pair(){}
    }
    void getPointValuesToUpdate( JavaRpcServer oTarget,
        ArrayList<KeyValue> arrKv )
    {
        JRetVal jRetVal;
        if( oTarget != null )
        {
            Map<Integer, Pair> a = new HashMap<Integer, Pair>();
            a.put( rpcbaseConstants.propRxBytes,
                    new Pair( "rx_bytes", rpcbaseConstants.typeUInt64 ));
            a.put( rpcbaseConstants.propTxBytes,
                    new Pair( "tx_bytes", rpcbaseConstants.typeUInt64 ));
            a.put( rpcbaseConstants.propQps,
                    new Pair( "max_qps", rpcbaseConstants.typeUInt64 ));
            a.put( rpcbaseConstants.propMsgCount,
                    new Pair( "req_count", rpcbaseConstants.typeUInt32 ));
            a.put( rpcbaseConstants.propMsgRespCount,
                    new Pair( "resp_count", rpcbaseConstants.typeUInt32 ));
            a.put( rpcbaseConstants.propFailureCount,
                    new Pair( "failure_count", rpcbaseConstants.typeUInt32 ));
            a.put( rpcbaseConstants.propStmPerSess,
                    new Pair( "max_streams_per_session", rpcbaseConstants.typeUInt32 ));
            a.put( rpcbaseConstants.propPendingTasks,
                    new Pair( "pending_tasks", rpcbaseConstants.typeUInt32 ));
            a.put( rpcbaseConstants.propUptime,
                    new Pair( "uptime", rpcbaseConstants.typeUInt32 ));
            a.put( rpcbaseConstants.propConnections,
                    new Pair( "conn_count", rpcbaseConstants.typeUInt32 ));
            a.put( rpcbaseConstants.propObjCount,
                    new Pair( "obj_count", rpcbaseConstants.typeUInt32 ));
            for( Map.Entry< Integer, Pair> entry : a.entrySet() )
            {
                jRetVal = oTarget.getProperty( entry.getKey() );
                if( jRetVal.ERROR())
                    continue;
                Pair oPair = entry.getValue();
                KeyValue okv = new KeyValue();
                okv.strKey = oPair.strPtName;
                okv.oValue = new JVariant();
                okv.oValue.iType = oPair.typeId;
                try {
                    if (oPair.typeId == rpcbaseConstants.typeUInt64) {
                        okv.oValue.val = jRetVal.getAtLong(0);
                    } else if (oPair.typeId == rpcbaseConstants.typeUInt32) {
                        okv.oValue.val = jRetVal.getAtInt(0);
                    }
                } catch( IndexOutOfBoundsException e ){
                    continue;
                }
                arrKv.add( okv );
            }
        }

        KeyValue okv;
        jRetVal = ( JRetVal) rpcbase.GetOpenFileCount();
        if(jRetVal.SUCCEEDED()) {
            int iCount = jRetVal.getAtInt(0);
            okv = new KeyValue();
            okv.strKey = "open_files";
            okv.oValue = new JVariant();
            okv.oValue.iType = rpcbaseConstants.typeUInt32;
            okv.oValue.val = iCount;
            arrKv.add(okv);
        }
        long vmsize = rpcbase.GetVmSize().longValue();
        okv = new KeyValue();
        okv.strKey = "vmsize_kb";
        okv.oValue = new JVariant();
        okv.oValue.iType = rpcbaseConstants.typeUInt64;
        okv.oValue.val = vmsize;
        arrKv.add( okv );

        float cpuload = rpcbase.GetCpuUsage();
        okv = new KeyValue();
        okv.strKey = "cpu_load";
        okv.oValue = new JVariant();
        okv.oValue.iType = rpcbaseConstants.typeFloat;
        okv.oValue.val = cpuload;
        arrKv.add(okv);
    }

    // IAppStore::OnPointChanged the event handler
    public void OnPointChanged(
        JavaReqContext oReqCtx,
        String strPtPath,
        JVariant value  )
    {
        try {
            String[] parts = strPtPath.split("/");
            if (parts.length != 2) return;

            String appName = parts[0];
            String pointName = parts[1];

            if (!appName.equals(this.m_strAppInst)) return;

            if (pointName.equals("restart") && value.val.equals(1)) {
                MainThread.setExit();
                return;
            }

            if (pointName.equals("rpt_timer")) {
                ArrayList<KeyValue> keyValues = new ArrayList<>();
                this.getPointValuesToUpdate(
                    this.m_oTarget, keyValues);

                if( !MainThread.addTask(oProxy ->
                    oProxy.SetPointValues(this.m_strAppInst, keyValues.toArray(new KeyValue[0]))) )
                    rpcbase.JavaOutputMsg("Error add task to task loop " +
                            this.m_strAppInst + " " + strPtPath );
            }
        } catch (Exception e) {
            rpcbase.JavaOutputMsg("Error in onPointChanged: " + e.getMessage());
        }
    }
    
    // IAppStore::OnPointsChanged the event handler
    public void OnPointsChanged(
        JavaReqContext oReqCtx,
        KeyValue[] arrKVs  )
    {
        // event IAppStore::OnPointsChanged comes
        // make change here to handle the event
        return;
    }

    @Override
    public int onPostStop() {
        rpcbase.JavaOutputMsg("AppManagercli is shutdown");
        return 0;
    }
}