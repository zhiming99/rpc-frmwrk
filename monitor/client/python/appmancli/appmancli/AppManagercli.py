# GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
# Copyright (C) 2025  zhiming <woodhead99@gmail.com>
# This program can be distributed under the terms of the GNU GPLv3.
# ridlc --services=AppManager --sync_mode IDataProducer=sync --sync_mode IAppStore=sync --client -pslO . ../../../../monitor/appmon/appmon.ridl 
from typing import Tuple
from rpcf.rpcbase import *
from rpcf.proxy import *
from seribase import CSerialBase
from seribase import Variant
from appmonstructs import *
from AppManagerclibase import *
import queue

bExit = False
oTaskQue = queue.Queue()

class CIAppStorecli( IIAppStore_CliImpl ):

    def GetPointValuesToUpdate( self,
        oTarget: PyRpcServer,
        arrKvs : list ) -> Tuple[ int, list ]:

        blPoints = dict()
        blPoints={cpp.propRxBytes: ('rx_bytes', cpp.typeUInt64),
                cpp.propTxBytes: ('tx_bytes', cpp.typeUInt64),
                cpp.propQps: ('max_qps', cpp.typeUInt64),
                cpp.propMsgCount: ('req_count', cpp.typeUInt32),
                cpp.propMsgRespCount: ('resp_count', cpp.typeUInt32),
                cpp.propFailureCount: ('failure_count', cpp.typeUInt32),
                cpp.propStmPerSess: ('max_streams_per_session', cpp.typeUInt32),
                cpp.propPendingTasks: ('pending_tasks', cpp.typeUInt32),
                cpp.propUptime: ('uptime', cpp.typeUInt32),
                cpp.propConnections: ('conn_count', cpp.typeUInt32),
                cpp.propObjCount: ('obj_count', cpp.typeUInt32) }

        if oTarget is not None:
            for key, value in blPoints.items():
                ret = oTarget.GetProperty( key )
                if ret[0] == 0:
                    kvValue = KeyValue()
                    kvValue.strKey = value[0]
                    kvValue.oValue = Variant()
                    kvValue.oValue.iType = value[1]
                    kvValue.oValue.val = ret[1][0]
                    arrKvs.append( kvValue )

        ret = cpp.GetVmSize()
        kvValue = KeyValue()
        kvValue.strKey = 'vmsize_kb'
        kvValue.oValue = Variant()
        kvValue.oValue.iType = cpp.typeUInt64
        kvValue.oValue.val = ret
        arrKvs.append( kvValue )

        ret = cpp.GetOpenFileCount(os.getpid())
        if ret[0] == 0:
            kvValue = KeyValue()
            kvValue.strKey = 'open_files'
            kvValue.oValue = Variant()
            kvValue.oValue.iType = cpp.typeUInt32
            kvValue.oValue.val = ret[1][0]
            arrKvs.append( kvValue )

        ret = cpp.GetCpuUsage()
        kvValue = KeyValue()
        kvValue.strKey = 'cpu_load'
        kvValue.oValue = Variant()
        kvValue.oValue.iType = cpp.typeFloat
        kvValue.oValue.val = ret
        arrKvs.append( kvValue )

    def OnPointChangedWorker( self,
        strPtPath : str,
        value : Variant
        ) :
        try:
            strAppName, strPtName = strPtPath.split( '/' )
            if strAppName != self.m_strAppInst:
                return
            if strPtName == 'restart' and value.val == 1:
                global bExit
                bExit = True
                return
            if strPtName == 'rpt_timer':
                arrKVs = []
                self.GetPointValuesToUpdate( self.m_oTarget, arrKVs )
                self.SetPointValues( self.m_strAppInst, arrKVs )
                return
        except Exception as err:
            OutputMsg( f"Error in OnPointChangedWorker: {err}" )
        return

    def OnPointChanged( self,
        strPtPath : str,
        value : Variant
        ) :
        try:
            task = ( CAppManagerProxy.OnPointChangedWorker,
                strPtPath, value )
            oTaskQue.put( task )
        except Exception as err:
            print( "Error in OnPointChanged: ", err )
        return
        
    '''
    Event handler
    Add code here to process the event
    '''
    def OnPointsChanged( self,
        arrKVs : list
        ) :
        return

    def OnPostStop(self):
        OutputMsg("AppManagercli is shutdown")
        oTaskQue.queue.clear()
        return 0
        
    
class CIDataProducercli( IIDataProducer_CliImpl ):
    pass
    
class CAppManagerProxy(
    CIAppStorecli,
    CIDataProducercli,
    PyRpcProxy ) :
    def __init__( self, pIoMgr, strDesc, strObjName ) :
        PyRpcProxy.__init__( self,
            pIoMgr, strDesc, strObjName )
        self.m_oTarget = None
        self.m_strAppInst = None
