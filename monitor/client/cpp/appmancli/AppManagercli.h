// GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
// Copyright (C) 2024  zhiming <woodhead99@gmail.com>
// This program can be distributed under the terms of the GNU GPLv3.
// ../../../../ridl/.libs/ridlc --sync_mode IAppStore=async_p --services=AppManager,SimpleAuth --client -slO . ../../../../monitor/appmon/appmon.ridl 
#pragma once
#include "appmon.h"

#include "IAppStorecli.h"
#include "IDataProducercli.h"

DECLARE_AGGREGATED_SKEL_PROXY(
    CAppManager_CliSkel,
    CStatCountersProxySkel,
    IIAppStore_PImpl,
    IIDataProducer_PImpl );

#define Clsid_CAppManager_CliBase    Clsid_Invalid

DECLARE_AGGREGATED_PROXY(
    CAppManager_CliBase,
    CStatCounters_CliBase,
    CStreamProxyAsync,
    IIAppStore_CliApi,
    IIDataProducer_CliApi,
    CFastRpcProxyBase );

using PTCHGCB=void* (*)( IConfigDb* pContext,
    const std::string& strPtPath, const Variant& oVar );

struct IAsyncCallbacks
{
    // RPC Async Req Callback
    virtual gint32 ListAppsCallback(
        IConfigDb* context, 
        gint32 iRet,
        std::vector<std::string>& arrApps /*[ In ]*/ )
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 ListPointsCallback(
        IConfigDb* context, 
        gint32 iRet,
        std::vector<std::string>& arrPoints /*[ In ]*/ )
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 ListAttributesCallback(
        IConfigDb* context, 
        gint32 iRet,
        std::vector<std::string>& arrAttributes /*[ In ]*/ )
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 SetPointValueCallback(
        IConfigDb* context, 
        gint32 iRet )
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 GetPointValueCallback(
        IConfigDb* context, 
        gint32 iRet,
        const Variant& rvalue /*[ In ]*/ ) 
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 SetLargePointValueCallback(
        IConfigDb* context, 
        gint32 iRet )
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 GetLargePointValueCallback(
        IConfigDb* context, 
        gint32 iRet,
        BufPtr& value /*[ In ]*/ )
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 SubscribeStreamPointCallback(
        IConfigDb* context, 
        gint32 iRet )
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 SetAttrValueCallback(
        IConfigDb* context, 
        gint32 iRet )
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 GetAttrValueCallback(
        IConfigDb* context, 
        gint32 iRet,
        const Variant& rvalue /*[ In ]*/ )
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 SetPointValuesCallback(
        IConfigDb* context, 
        gint32 iRet )
    { return 0; }
    // RPC Async Req Callback
    virtual gint32 GetPointValuesCallback(
        IConfigDb* context, 
        gint32 iRet,
        std::vector<KeyValue>& arrKeyVals /*[ In ]*/ )
    { return 0;}
    //RPC event handler 'OnPointChanged'
    virtual gint32 OnPointChanged(
        IConfigDb* context, 
        const std::string& strPtPath /*[ In ]*/,
        const Variant& value /*[ In ]*/ )
    { return 0;}
    //RPC event handler 'OnPointsChanged'
    virtual gint32 OnPointsChanged(
        IConfigDb* context, 
        std::vector<KeyValue>& arrKVs /*[ In ]*/ )
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 ClaimAppInstsCallback(
        IConfigDb* context, 
        gint32 iRet,
        std::vector<KeyValue>& arrInitKVs /*[ In ]*/ )
    { return 0;}
    // RPC Async Req Callback
    virtual gint32 FreeAppInstsCallback(
        IConfigDb* context, 
        gint32 iRet )
    { return 0;}

    virtual gint32 OnSvrOffline(
        IConfigDb* context )
    { return 0; }
};

class CAppManager_CliImpl
    : public CAppManager_CliBase
{
    IAsyncCallbacks* m_pAsyncCbs = nullptr;
    CfgPtr m_pContext;
    public:

    public:
    typedef CAppManager_CliBase super;
    CAppManager_CliImpl( const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(CAppManager_CliImpl ) ); }

    /* The following 2 methods are important for */
    /* streaming transfer. rewrite them if necessary */
    gint32 OnStreamReady( HANDLE hChannel ) override
    { return super::OnStreamReady( hChannel ); } 
    
    gint32 OnStmClosing( HANDLE hChannel ) override
    { return super::OnStmClosing( hChannel ); }

    inline void SetAsyncCallbacks(
        IAsyncCallbacks* pCbs, const CfgPtr& pcontext )
    {
        m_pAsyncCbs = pCbs;
        m_pContext = pcontext;
    };

    inline gint32 GetAsyncCallbacks(
        IAsyncCallbacks*& pCbs, CfgPtr& pContext ) const
    {
        CStdRMutex  oLock( GetLock() );
        if( m_pAsyncCbs == nullptr )
            return -EINVAL;
        pCbs = m_pAsyncCbs;
        pContext = m_pContext;
        return 0;
    }
    
    // RPC Async Req Callback
    gint32 ListAppsCallback(
        IConfigDb* context, 
        gint32 iRet,
        std::vector<std::string>& arrApps /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 ListPointsCallback(
        IConfigDb* context, 
        gint32 iRet,
        std::vector<std::string>& arrPoints /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 ListAttributesCallback(
        IConfigDb* context, 
        gint32 iRet,
        std::vector<std::string>& arrAttributes /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 SetPointValueCallback(
        IConfigDb* context, 
        gint32 iRet ) override;
    // RPC Async Req Callback
    gint32 GetPointValueCallback(
        IConfigDb* context, 
        gint32 iRet,
        const Variant& rvalue /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 SetLargePointValueCallback(
        IConfigDb* context, 
        gint32 iRet ) override;
    // RPC Async Req Callback
    gint32 GetLargePointValueCallback(
        IConfigDb* context, 
        gint32 iRet,
        BufPtr& value /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 SubscribeStreamPointCallback(
        IConfigDb* context, 
        gint32 iRet ) override;
    // RPC Async Req Callback
    gint32 SetAttrValueCallback(
        IConfigDb* context, 
        gint32 iRet ) override;
    // RPC Async Req Callback
    gint32 GetAttrValueCallback(
        IConfigDb* context, 
        gint32 iRet,
        const Variant& rvalue /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 SetPointValuesCallback(
        IConfigDb* context, 
        gint32 iRet ) override;
    // RPC Async Req Callback
    gint32 GetPointValuesCallback(
        IConfigDb* context, 
        gint32 iRet,
        std::vector<KeyValue>& arrKeyVals /*[ In ]*/ ) override;
    //RPC event handler 'OnPointChanged'
    gint32 OnPointChanged(
        const std::string& strPtPath /*[ In ]*/,
        const Variant& value /*[ In ]*/ ) override;
    //RPC event handler 'OnPointsChanged'
    gint32 OnPointsChanged(
        std::vector<KeyValue>& arrKVs /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 ClaimAppInstsCallback(
        IConfigDb* context, 
        gint32 iRet,
        std::vector<KeyValue>& arrInitKVs /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 FreeAppInstsCallback(
        IConfigDb* context, 
        gint32 iRet ) override;

    gint32 CreateStmSkel(
        InterfPtr& pIf ) override;
    
    gint32 OnPreStart(
        IEventSink* pCallback ) override;

    gint32 CancelRequest(
        guint64 qwTaskToCancel )
    {
        InterfPtr pIf = this->GetStmSkel();
        if( pIf.IsEmpty() )
            return -EFAULT;
        CInterfaceProxy* pProxy = pIf;
        return pProxy->CancelRequest(
            qwTaskToCancel );
    }
    gint32 OnPostStop(
        IEventSink* pCallback ) override;
};

class CAppManager_ChannelCli
    : public CRpcStreamChannelCli
{
    public:
    typedef CRpcStreamChannelCli super;
    CAppManager_ChannelCli(
        const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(
        CAppManager_ChannelCli ) ); }
};

