// GENERATED BY RIDLC, MAKE SURE TO BACKUP BEFORE RUNNING RIDLC AGAIN
// Copyright (C) 2024  zhiming <woodhead99@gmail.com>
// This program can be distributed under the terms of the GNU GPLv3.
// ../../../../ridl/.libs/ridlc --sync_mode IAppStore=async_p --sync_mode IUserManager=async_p --services=AppManager,SimpleAuth --client -slO . ../../../../monitor/appmon/appmon.ridl 
#pragma once
#include "appmon.h"

#include "IUserManagercli.h"

gint32 GetSimpleAuthcli( InterfPtr& pCli );

gint32 DestroySimpleAuthcli(
    CIoManager* pMgr, IEventSink* pCallback );


class CSimpleAuth_CliImpl;
struct IAsyncSACallbacks
{
    // RPC Async Req Callback
    virtual gint32 GetUidByOAuth2NameCallback(
        IConfigDb* context, 
        gint32 iRet,
        gint32 dwUid /*[ In ]*/ )
    { return 0; }
    // RPC Async Req Callback
    virtual gint32 GetUidByKrb5NameCallback(
        IConfigDb* context, 
        gint32 iRet,
        gint32 dwUid /*[ In ]*/ )
    { return 0; }
    // RPC Async Req Callback
    virtual gint32 GetUidByUserNameCallback(
        IConfigDb* context, 
        gint32 iRet,
        gint32 dwUid /*[ In ]*/ )
    { return 0; }
    // RPC Async Req Callback
    virtual gint32 GetPasswordSaltCallback(
        IConfigDb* context, 
        gint32 iRet,
        const std::string& strSalt /*[ In ]*/ )
    { return 0; }

    virtual gint32 CheckClientTokenCallback( 
        IConfigDb* context, gint32 iRet,
        ObjPtr& oInfo /*[ In ]*/ )
    { return 0; }

    virtual void OnSvrOffline( IConfigDb* context,
        CSimpleAuth_CliImpl* pIf )
    { return; }
};

using PSAACBS=std::shared_ptr<IAsyncSACallbacks>;

DECLARE_AGGREGATED_SKEL_PROXY(
    CSimpleAuth_CliSkel,
    CStatCountersProxySkel,
    IIUserManager_PImpl );

#define Clsid_CSimpleAuth_CliBase    Clsid_Invalid

DECLARE_AGGREGATED_PROXY(
    CSimpleAuth_CliBase,
    CStatCounters_CliBase,
    IIUserManager_CliApi,
    CFastRpcProxyBase );

class CSimpleAuth_CliImpl
    : public CSimpleAuth_CliBase
{
    PSAACBS m_pAsyncCbs;
    CfgPtr m_pContext;
    public:
    typedef CSimpleAuth_CliBase super;
    CSimpleAuth_CliImpl( const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(CSimpleAuth_CliImpl ) ); }

    inline gint32 GetAsyncCallbacks(
        PSAACBS& pCbs, CfgPtr& pContext ) const
    {
        CStdRMutex  oLock( GetLock() );
        if( m_pAsyncCbs == nullptr )
            return -EINVAL;
        pCbs = m_pAsyncCbs;
        pContext = m_pContext;
        return 0;
    }

    inline gint32 GetAsyncCallbacks(
        PSAACBS& pCbs ) const
    {
        CStdRMutex  oLock( GetLock() );
        if( m_pAsyncCbs == nullptr )
            return -EINVAL;
        pCbs = m_pAsyncCbs;
        return 0;
    }

    inline void SetAsyncCallbacks(
        PSAACBS& pCbs, const CfgPtr& pcontext )
    {
        CStdRMutex  oLock( GetLock() );
        m_pAsyncCbs = pCbs;
        m_pContext = pcontext;
    };

    inline void ClearCallbacks(
        PSAACBS& pCbs, const CfgPtr& pcontext )
    {
        CStdRMutex  oLock( GetLock() );
        m_pAsyncCbs.reset();
        m_pContext.Clear();
    };

    // RPC Async Req Callback
    gint32 GetUidByOAuth2NameCallback(
        IConfigDb* context, 
        gint32 iRet,
        gint32 dwUid /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 GetUidByKrb5NameCallback(
        IConfigDb* context, 
        gint32 iRet,
        gint32 dwUid /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 GetUidByUserNameCallback(
        IConfigDb* context, 
        gint32 iRet,
        gint32 dwUid /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 GetPasswordSaltCallback(
        IConfigDb* context, 
        gint32 iRet,
        const std::string& strSalt /*[ In ]*/ ) override;
    // RPC Async Req Callback
    gint32 CheckClientTokenCallback(
        IConfigDb* context, 
        gint32 iRet,
        ObjPtr& oInfo /*[ In ]*/ ) override;
    gint32 CreateStmSkel(
        InterfPtr& pIf ) override;
    
    gint32 OnPreStart(
        IEventSink* pCallback ) override;

    gint32 OnPostStop(
        IEventSink* pCallback ) override;

    gint32 CancelRequest(
        guint64 qwTaskToCancel )
    {
        InterfPtr pIf = this->GetStmSkel();
        if( pIf.IsEmpty() )
            return -EFAULT;
        CInterfaceProxy* pProxy = pIf;
        return pProxy->CancelRequest(
            qwTaskToCancel );
    }
};

class CSimpleAuth_ChannelCli
    : public CRpcStreamChannelCli
{
    public:
    typedef CRpcStreamChannelCli super;
    CSimpleAuth_ChannelCli(
        const IConfigDb* pCfg ) :
        super::virtbase( pCfg ), super( pCfg )
    { SetClassId( clsid(
        CSimpleAuth_ChannelCli ) ); }
};

gint32 CreateSimpleAuthcli( CIoManager* pMgr,
    EnumClsid iClsid, IEventSink* pCallback,
    IConfigDb* pCfg );
